include "TriggerLibs/NativeLib"
include "LibScio"

include "Lib1B69CECC_h"

//--------------------------------------------------------------------------------------------------
// Library: PeepMod Library
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1B69CECC_InitLibraries () {
    libNtve_InitVariables();
    libScio_InitVariables();
}

// Variable Initialization
bool lib1B69CECC_InitVariables_completed = false;

void lib1B69CECC_InitVariables () {
    int init_i;

    if (lib1B69CECC_InitVariables_completed) {
        return;
    }

    lib1B69CECC_InitVariables_completed = true;

    lib1B69CECC_gv_overlord_speed = 0.6445;
    lib1B69CECC_gv_hydralisk_speed = 2.25;
    lib1B69CECC_gv_hydralisk_speed_creep_mul = 1.3;
    lib1B69CECC_gv_upgradesCounter = 1;
    lib1B69CECC_gv_tmr_stalemate_message = TimerCreate();
    lib1B69CECC_gv_tmr_stalemate = TimerCreate();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1B69CECC_gv_reveal_timer_record[init_i].lv_time_left = 30;
    }
    lib1B69CECC_gv_rEVEALED_PLAYERS = PlayerGroupEmpty();
    lib1B69CECC_gv_tmrDetectVictory = TimerCreate();
    lib1B69CECC_gv_pLAYERS = PlayerGroupEmpty();
    lib1B69CECC_gv_oBSERVERS = PlayerGroupEmpty();
    lib1B69CECC_gv_count = lib1B69CECC_gv_lOBBY_COUNTDOWN_TIME;
    lib1B69CECC_gv_lobbyTimer.lv_startTime = CurrentDateTimeGet();
    lib1B69CECC_gv_lobbyTimer.lv_timer = TimerCreate();
    lib1B69CECC_gv_ui_genetron_energy_panel = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_genetron_energy_display = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_genetron_energy_current = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_genetron_energy_max = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOneEnergy.lv_ui_genetron_energy_display = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOneEnergy.lv_ui_genetron_energy_current = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOneEnergy.lv_ui_genetron_energy_max = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwoEnergy.lv_ui_genetron_energy_display = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwoEnergy.lv_ui_genetron_energy_current = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwoEnergy.lv_ui_genetron_energy_max = c_invalidDialogControlId;
    lib1B69CECC_gv_tmr_stalemate_message_refesh = TimerCreate();
    lib1B69CECC_gv_ui_stalemate_dialog = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_reveal_label2 = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_production_tab = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_matchTime = TimerCreate();
    lib1B69CECC_gv_ui_clock = c_invalidDialogId;
    lib1B69CECC_gv_ui_clocklabel = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_reveal = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_reveal_label = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_gg_menu = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_gg_menuyes = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_gg_menuno = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_menu = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_play = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_playpanel = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_play_race = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_play_league = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_play_confirm = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_play_cancel = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_help = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_chat = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_lobby_timer_message = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_lobby_timer_dialog = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_lobby_pane = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_lobby_list_frame = c_invalidDialogControlId;
    lib1B69CECC_gv_ui_lobby_list = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOne.lv_ui_minerals_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOne.lv_ui_gas_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOne.lv_ui_supplymax_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOne.lv_ui_supplycurrent_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOne.lv_ui_energymax_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOne.lv_ui_energycurrent_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOne.lv_ui_player_stats = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOne.lv_ui_race_state = c_invalidDialogControlId;
    lib1B69CECC_gv_playerOne.lv_ui_player_name = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwo.lv_ui_minerals_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwo.lv_ui_gas_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwo.lv_ui_supplymax_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwo.lv_ui_supplycurrent_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwo.lv_ui_energymax_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwo.lv_ui_energycurrent_label = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwo.lv_ui_player_stats = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwo.lv_ui_race_state = c_invalidDialogControlId;
    lib1B69CECC_gv_playerTwo.lv_ui_player_name = c_invalidDialogControlId;
    lib1B69CECC_gv_theLobby.lv_players = PlayerGroupEmpty();
}

// Functions
void lib1B69CECC_gf_RecordUnitSpeeds () {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gv_overlord_speed = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "Overlord", "Speed", c_playerAny);
    lib1B69CECC_gv_hydralisk_speed = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "Hydralisk", "Speed", c_playerAny);
    lib1B69CECC_gv_hydralisk_speed_creep_mul = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "Hydralisk", "SpeedMultiplierCreep", c_playerAny);
}

void lib1B69CECC_gf_ResetTechForPlayer (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoBA31E24C_ae;
    const int autoBA31E24C_ai = 1;

    // Variable Initialization

    // Implementation
    autoBA31E24C_ae = (lib1B69CECC_gv_upgradesCounter - 1);
    lv_index = 1;
    for ( ; ( (autoBA31E24C_ai >= 0 && lv_index <= autoBA31E24C_ae) || (autoBA31E24C_ai < 0 && lv_index >= autoBA31E24C_ae) ) ; lv_index += autoBA31E24C_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lib1B69CECC_gv_upgradesArray[lv_index], 0);
    }
    lib1B69CECC_gv_upgradesCounter = 1;
    CatalogFieldValueSet(c_gameCatalogUnit, "Hydralisk", "Speed", lp_player, FixedToString(lib1B69CECC_gv_hydralisk_speed, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "Hydralisk", "SpeedMultiplierCreep", lp_player, FixedToString(lib1B69CECC_gv_hydralisk_speed_creep_mul, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "Overlord", "Speed", lp_player, FixedToString(lib1B69CECC_gv_overlord_speed, c_fixedPrecisionAny));
}

void lib1B69CECC_gf_InitialiseStalemateDetection () {
    // Variable Declarations
    playergroup lv_stalemate_player_one;
    playergroup lv_stalemate_player_two;

    // Automatic Variable Declarations
    playergroup auto6F351DE6_g;
    int auto6F351DE6_var;
    playergroup auto3D44715D_g;
    int auto3D44715D_var;

    // Variable Initialization
    lv_stalemate_player_one = PlayerGroupEmpty();
    lv_stalemate_player_two = PlayerGroupEmpty();

    // Implementation
    lv_stalemate_player_one = lib1B69CECC_gf_choose_a_player(lib1B69CECC_gv_pLAYERS);
    lv_stalemate_player_two = PlayerGroupCopy(lib1B69CECC_gv_pLAYERS);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_stalemate_player_one, lv_stalemate_player_two);
    lv_stalemate_player_two = lib1B69CECC_gf_choose_a_player(lv_stalemate_player_two);
    auto6F351DE6_g = lv_stalemate_player_one;
    auto6F351DE6_var = -1;
    while (true) {
        auto6F351DE6_var = PlayerGroupNextPlayer(auto6F351DE6_g, auto6F351DE6_var);
        if (auto6F351DE6_var < 0) { break; }
        lib1B69CECC_gv_st_player_one = auto6F351DE6_var;
    }
    auto3D44715D_g = lv_stalemate_player_two;
    auto3D44715D_var = -1;
    while (true) {
        auto3D44715D_var = PlayerGroupNextPlayer(auto3D44715D_g, auto3D44715D_var);
        if (auto3D44715D_var < 0) { break; }
        lib1B69CECC_gv_st_player_two = auto3D44715D_var;
    }
    TimerStart(lib1B69CECC_gv_tmr_stalemate_message, lib1B69CECC_gv_sTALEMATE_DELTA_TIME, false, c_timeGame);
}

void lib1B69CECC_gf_StopStalemateDetection () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_StopTimer(lib1B69CECC_gv_tmr_stalemate);
    libNtve_gf_StopTimer(lib1B69CECC_gv_tmr_stalemate_message);
}

void lib1B69CECC_gf_EndMatchInStalemate () {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gf_StopVictoryDetection();
    UIDisplayMessage(lib1B69CECC_gf_nonneutral_players(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1B69CECC_0DF8463C"));
    lib1B69CECC_gf_ResetGame();
}

unitgroup lib1B69CECC_gf_GetGenetronEnergyDummyGroup () {
    // Variable Declarations
    unitgroup lv_dummiesGroup;

    // Automatic Variable Declarations
    playergroup autoB638E7F4_g;
    int autoB638E7F4_var;

    // Variable Initialization
    lv_dummiesGroup = UnitGroupEmpty();

    // Implementation
    autoB638E7F4_g = PlayerGroupAll();
    autoB638E7F4_var = -1;
    while (true) {
        autoB638E7F4_var = PlayerGroupNextPlayer(autoB638E7F4_g, autoB638E7F4_var);
        if (autoB638E7F4_var < 0) { break; }
        UnitGroupAdd(lv_dummiesGroup, libScio_gv_sCION_POWERDUMMIES[autoB638E7F4_var]);
    }
    return lv_dummiesGroup;
}

fixed lib1B69CECC_gf_ComputeGenetronEnergyCurrent (int lp_player) {
    // Variable Declarations
    fixed lv_genetron_energy_current_val;
    unitgroup lv_genetron_energy_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_genetron_energy_group = UnitGroupEmpty();

    // Implementation
    return UnitGetPropertyFixed(libScio_gv_sCION_POWERDUMMIES[lp_player], c_unitPropEnergy, c_unitPropCurrent);
}

fixed lib1B69CECC_gf_ComputeGenetronEnergyMax (int lp_player) {
    // Variable Declarations
    fixed lv_genetron_energy_max_val;
    unitgroup lv_genetron_energy_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_genetron_energy_group = UnitGroupEmpty();

    // Implementation
    return UnitGetPropertyFixed(libScio_gv_sCION_POWERDUMMIES[lp_player], c_unitPropEnergyMax, c_unitPropCurrent);
}

void lib1B69CECC_gf_DisplayRaceIcon (int lp_player, structref<lib1B69CECC_gs_PlayerStats> lp_player_stats) {
    // Variable Declarations
    string lv_theRace;
    string lv_race_text;

    // Automatic Variable Declarations
    string autoF5B8B2E6_val;

    // Variable Initialization
    lv_race_text = "";

    // Implementation
    lv_theRace = PlayerRace(lp_player);
    autoF5B8B2E6_val = lv_theRace;
    if (autoF5B8B2E6_val == "Terr") {
        lv_race_text = "Terran";
    }
    else if (autoF5B8B2E6_val == "Zerg") {
        lv_race_text = "Zerg";
    }
    else if (autoF5B8B2E6_val == "Prot") {
        lv_race_text = "Protoss";
    }
    else if (autoF5B8B2E6_val == "Gen") {
        lv_race_text = "Genetron";
    }
    else if (autoF5B8B2E6_val == "Xayi") {
        lv_race_text = "Xayid";
    }
    else if (autoF5B8B2E6_val == "Keir") {
        lv_race_text = "Keiron";
    }
    else {
        lv_race_text = "Terran";
    }
    DialogControlSetAnimationState(lp_player_stats.lv_ui_player_stats, lib1B69CECC_gv_oBSERVERS, "RaceState", lv_race_text);
}

void lib1B69CECC_gf_StartClock () {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gv_time_diff = 0;
    lib1B69CECC_gv_game_started = true;
    lib1B69CECC_gf_SetClockSkin();
}

void lib1B69CECC_gf_StopClock () {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gv_game_started = false;
    lib1B69CECC_gf_ResetClockDisplay();
    lib1B69CECC_gv_time_diff = 0;
}

void lib1B69CECC_gf_ResetRevealStatus () {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gv_rEVEALED_PLAYERS = PlayerGroupEmpty();
    DialogControlSetVisible(lib1B69CECC_gv_ui_reveal, lib1B69CECC_gf_nonneutral_players(), false);
}

void lib1B69CECC_gf_reveal_player (int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto74BDC69E_g;
    int auto74BDC69E_u;
    unit auto74BDC69E_var;
    playergroup autoCB52BE8A_g;
    int autoCB52BE8A_var;

    // Implementation
    auto74BDC69E_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto74BDC69E_u = UnitGroupCount(auto74BDC69E_g, c_unitCountAll);
    for (;; auto74BDC69E_u -= 1) {
        auto74BDC69E_var = UnitGroupUnitFromEnd(auto74BDC69E_g, auto74BDC69E_u);
        if (auto74BDC69E_var == null) { break; }
        autoCB52BE8A_g = lib1B69CECC_gv_pLAYERS;
        autoCB52BE8A_var = -1;
        while (true) {
            autoCB52BE8A_var = PlayerGroupNextPlayer(autoCB52BE8A_g, autoCB52BE8A_var);
            if (autoCB52BE8A_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(auto74BDC69E_var, true, autoCB52BE8A_var);
        }
    }
}

void lib1B69CECC_gf_unreveal_player (int lp_player) {
    // Automatic Variable Declarations
    unitgroup autoC27FBB8C_g;
    int autoC27FBB8C_u;
    unit autoC27FBB8C_var;
    playergroup autoC24D79B9_g;
    int autoC24D79B9_var;

    // Implementation
    autoC27FBB8C_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC27FBB8C_u = UnitGroupCount(autoC27FBB8C_g, c_unitCountAll);
    for (;; autoC27FBB8C_u -= 1) {
        autoC27FBB8C_var = UnitGroupUnitFromEnd(autoC27FBB8C_g, autoC27FBB8C_u);
        if (autoC27FBB8C_var == null) { break; }
        autoC24D79B9_g = lib1B69CECC_gv_pLAYERS;
        autoC24D79B9_var = -1;
        while (true) {
            autoC24D79B9_var = PlayerGroupNextPlayer(autoC24D79B9_g, autoC24D79B9_var);
            if (autoC24D79B9_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(autoC27FBB8C_var, false, autoC24D79B9_var);
        }
    }
}

int lib1B69CECC_gf_find_index_of_player (int lp_player) {
    // Variable Declarations
    bool lv_found;
    int lv_index;
    const int lv_mAX_INDEX = 2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = 1;

    // Implementation
    while ((lv_index <= lv_mAX_INDEX) && (lv_found == false)) {
        if ((lib1B69CECC_gv_reveal_timer_record[lv_index].lv_player == lp_player)) {
            lv_found = true;
        }
        else {
            lv_index = (lv_index + 1);
        }
    }
    return MinI(lv_index, lv_mAX_INDEX);
}

bool lib1B69CECC_gf_IsPlayeralreadyinrecord (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(lib1B69CECC_gv_rEVEALED_PLAYERS, lp_player) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1B69CECC_gf_StartRevealTimerCountdown (int lp_player, int lp_index) {
    // Variable Declarations
    const int lv_cOUNTDOWN = 30;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1B69CECC_gv_reveal_timer_record[lp_index].lv_player = lp_player;
    lib1B69CECC_gv_reveal_timer_record[lp_index].lv_time_left = lv_cOUNTDOWN;
}

void lib1B69CECC_gf_StartRevealTimer (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto04E38670_ae = 2;
    const int auto04E38670_ai = 1;
    const int auto58B6EE0C_ae = 2;
    const int auto58B6EE0C_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1B69CECC_gf_IsPlayeralreadyinrecord(lp_player) == true)) {
        lv_index = 1;
        for ( ; ( (auto58B6EE0C_ai >= 0 && lv_index <= auto58B6EE0C_ae) || (auto58B6EE0C_ai < 0 && lv_index >= auto58B6EE0C_ae) ) ; lv_index += auto58B6EE0C_ai ) {
            if ((lib1B69CECC_gv_reveal_timer_record[lv_index].lv_player == lp_player)) {
                lib1B69CECC_gf_StartRevealTimerCountdown(lp_player, lv_index);
            }

        }
    }
    else {
        lv_index = 1;
        for ( ; ( (auto04E38670_ai >= 0 && lv_index <= auto04E38670_ae) || (auto04E38670_ai < 0 && lv_index >= auto04E38670_ae) ) ; lv_index += auto04E38670_ai ) {
            if ((PlayerGroupHasPlayer(lib1B69CECC_gv_rEVEALED_PLAYERS, lib1B69CECC_gv_reveal_timer_record[lv_index].lv_player) == false)) {
                lib1B69CECC_gf_StartRevealTimerCountdown(lp_player, lv_index);
            }

        }
    }
}

bool lib1B69CECC_gf_ShouldPlayerBeRevealed (int lp_player) {
    // Variable Declarations
    unitgroup lv_units;

    // Automatic Variable Declarations
    unitgroup auto1E5E3B26_g;
    int auto1E5E3B26_u;
    unit auto1E5E3B26_var;

    // Variable Initialization
    lv_units = UnitGroupEmpty();

    // Implementation
    lv_units = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E5E3B26_g = lv_units;
    auto1E5E3B26_u = UnitGroupCount(auto1E5E3B26_g, c_unitCountAll);
    for (;; auto1E5E3B26_u -= 1) {
        auto1E5E3B26_var = UnitGroupUnitFromEnd(auto1E5E3B26_g, auto1E5E3B26_u);
        if (auto1E5E3B26_var == null) { break; }
        if ((!(((UnitGetType(auto1E5E3B26_var) == "CommandCenter") || (UnitGetType(auto1E5E3B26_var) == "CommandCenterFlying") || (UnitGetType(auto1E5E3B26_var) == "OrbitalCommand") || (UnitGetType(auto1E5E3B26_var) == "OrbitalCommandFlying") || (UnitGetType(auto1E5E3B26_var) == "PlanetaryFortress") || (UnitGetType(auto1E5E3B26_var) == "Hatchery") || (UnitGetType(auto1E5E3B26_var) == "Lair") || (UnitGetType(auto1E5E3B26_var) == "Hive") || (UnitGetType(auto1E5E3B26_var) == "Nexus") || (UnitGetType(auto1E5E3B26_var) == "ProcessingCore") || (UnitGetType(auto1E5E3B26_var) == "ScavengerNest") || (UnitGetType(auto1E5E3B26_var) == "Citadel") || (UnitGetType(auto1E5E3B26_var) == "CitadelCharged"))))) {
            UnitGroupRemove(lv_units, auto1E5E3B26_var);
        }

    }
    return (UnitGroupCount(lv_units, c_unitCountAlive) == 0);
}

void lib1B69CECC_gf_KillPlayerRealUnits (int lp_player) {
    // Variable Declarations
    unit lv_aUnit;
    playergroup lv_nonneutral;

    // Automatic Variable Declarations
    unitgroup auto04210A51_g;
    int auto04210A51_u;

    // Variable Initialization
    lv_nonneutral = PlayerGroupEmpty();

    // Implementation
    lv_nonneutral = lib1B69CECC_gf_nonneutral_players();
    auto04210A51_g = UnitGroupFilterPlayer(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32))), 0), lp_player, 0);
    auto04210A51_u = UnitGroupCount(auto04210A51_g, c_unitCountAll);
    for (;; auto04210A51_u -= 1) {
        lv_aUnit = UnitGroupUnitFromEnd(auto04210A51_g, auto04210A51_u);
        if (lv_aUnit == null) { break; }
        if ((UnitGroupHasUnit(lib1B69CECC_gf_GetGenetronEnergyDummyGroup(), lv_aUnit) == false)) {
            UnitKill(lv_aUnit);
        }

    }
}

void lib1B69CECC_gf_ResetAllScores () {
    // Automatic Variable Declarations
    playergroup autoE2ADD1C2_g;
    int autoE2ADD1C2_var;

    // Implementation
    autoE2ADD1C2_g = lib1B69CECC_gf_nonneutral_players();
    autoE2ADD1C2_var = -1;
    while (true) {
        autoE2ADD1C2_var = PlayerGroupNextPlayer(autoE2ADD1C2_g, autoE2ADD1C2_var);
        if (autoE2ADD1C2_var < 0) { break; }
        lib1B69CECC_gf_ResetScore(autoE2ADD1C2_var);
    }
}

void lib1B69CECC_gf_ResetScore (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_player, c_playerPropMineralsCollected, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespeneCollected, c_playerPropOperSetTo, 0);
    PlayerScoreValueSetFromInt(lp_player, "UnitsLostCount", 0);
    PlayerScoreValueSetFromInt(lp_player, "ResourceLostArmy", 0);
    PlayerScoreValueSetFromInt(lp_player, "UnitsLostValue", 0);
    PlayerScoreValueSetFromInt(lp_player, "MineralsLostArmy", 0);
    PlayerScoreValueSetFromInt(lp_player, "VespeneLostArmy", 0);
    PlayerScoreValueSetFromInt(lp_player, "ArmySpendingTotal", 0);
    PlayerScoreValueSetFromInt(lp_player, "EconomySpendingTotal", 0);
    PlayerScoreValueSetFromInt(lp_player, "UpgradeSpendingSampled", 0);
    PlayerScoreValueSetFromInt(lp_player, "UpgradeSpendingTotal", 0);
    PlayerScoreValueSetFromInt(lp_player, "ResourceValueArmySampled", 0);
    PlayerScoreValueSetFromInt(lp_player, "APM", 0);
}

void lib1B69CECC_gf_RecordPlatesonMap () {
    // Variable Declarations
    point lv_pos;
    int lv_index;
    string lv_plates_key;
    const int lv_nEUTRAL_PLAYER = 0;

    // Automatic Variable Declarations
    unitgroup auto46A38B20_g;
    int auto46A38B20_u;
    unit auto46A38B20_var;

    // Variable Initialization
    lv_plates_key = "";

    // Implementation
    auto46A38B20_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), 0), 0);
    auto46A38B20_u = UnitGroupCount(auto46A38B20_g, c_unitCountAll);
    for (;; auto46A38B20_u -= 1) {
        auto46A38B20_var = UnitGroupUnitFromEnd(auto46A38B20_g, auto46A38B20_u);
        if (auto46A38B20_var == null) { break; }
        if ((lib1B69CECC_gf_is_plates(auto46A38B20_var) == true)) {
            lv_pos = UnitGetPosition(auto46A38B20_var);
            lv_index = (lv_index + 1);
            lv_plates_key = lib1B69CECC_gf_compute_plates_key(lv_index);
            DataTableSetPoint(true, lv_plates_key, lv_pos);
        }

    }
    lib1B69CECC_gv_pLATES_COUNT = lv_index;
}

void lib1B69CECC_gf_RecordRocksonMap () {
    // Automatic Variable Declarations
    unitgroup auto7C0A6884_g;
    int auto7C0A6884_u;
    unit auto7C0A6884_var;

    // Implementation
    auto7C0A6884_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), 0), 0);
    auto7C0A6884_u = UnitGroupCount(auto7C0A6884_g, c_unitCountAll);
    for (;; auto7C0A6884_u -= 1) {
        auto7C0A6884_var = UnitGroupUnitFromEnd(auto7C0A6884_g, auto7C0A6884_u);
        if (auto7C0A6884_var == null) { break; }
        if (((lib1B69CECC_gf_is_rocks(auto7C0A6884_var) == true))) {
            lib1B69CECC_gf_AddMapFeature(UnitGetPosition(auto7C0A6884_var), UnitGetFacing(auto7C0A6884_var), UnitGetType(auto7C0A6884_var));
        }

    }
}

void lib1B69CECC_gf_RecordBlueMineralsonMap () {
    // Variable Declarations
    point lv_pos;
    int lv_index;
    string lv_mineral_field_key;
    int lv_mineral_quantity;

    // Automatic Variable Declarations
    unitgroup autoF132B118_g;
    int autoF132B118_u;
    unit autoF132B118_var;

    // Variable Initialization
    lv_mineral_field_key = "";

    // Implementation
    autoF132B118_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, 0, 0), 0);
    autoF132B118_u = UnitGroupCount(autoF132B118_g, c_unitCountAll);
    for (;; autoF132B118_u -= 1) {
        autoF132B118_var = UnitGroupUnitFromEnd(autoF132B118_g, autoF132B118_u);
        if (autoF132B118_var == null) { break; }
        if ((lib1B69CECC_gf_is_mineral_field(autoF132B118_var) == true)) {
            lv_pos = UnitGetPosition(autoF132B118_var);
            lv_index = (lv_index + 1);
            lv_mineral_field_key = lib1B69CECC_gf_compute_mineral_field_key(lv_index);
            DataTableSetPoint(true, lv_mineral_field_key, lv_pos);
            lv_mineral_quantity = UnitGetPropertyInt(autoF132B118_var, c_unitPropResources, c_unitPropCurrent);
            DataTableSetInt(true, lib1B69CECC_gf_compute_mineral_quantity_key(lv_index), lv_mineral_quantity);
        }

    }
    lib1B69CECC_gv_mINERAL_FIELD_COUNT = lv_index;
}

void lib1B69CECC_gf_RecordRichMineralsonMap () {
    // Variable Declarations
    point lv_pos;
    int lv_index;
    string lv_mineral_field_key;
    int lv_mineral_quantity;

    // Automatic Variable Declarations
    unitgroup auto2A765CDC_g;
    int auto2A765CDC_u;
    unit auto2A765CDC_var;

    // Variable Initialization
    lv_mineral_field_key = "";

    // Implementation
    auto2A765CDC_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, 0, 0), 0);
    auto2A765CDC_u = UnitGroupCount(auto2A765CDC_g, c_unitCountAll);
    for (;; auto2A765CDC_u -= 1) {
        auto2A765CDC_var = UnitGroupUnitFromEnd(auto2A765CDC_g, auto2A765CDC_u);
        if (auto2A765CDC_var == null) { break; }
        if ((lib1B69CECC_gf_is_rich_mineral_field(auto2A765CDC_var) == true)) {
            lv_pos = UnitGetPosition(auto2A765CDC_var);
            lv_index = (lv_index + 1);
            lv_mineral_field_key = lib1B69CECC_gf_compute_rich_mineral_field_key(lv_index);
            DataTableSetPoint(true, lv_mineral_field_key, lv_pos);
            lv_mineral_quantity = UnitGetPropertyInt(auto2A765CDC_var, c_unitPropResources, c_unitPropCurrent);
            DataTableSetInt(true, lib1B69CECC_gf_compute_rich_mineral_quantity_key(lv_index), lv_mineral_quantity);
        }

    }
    lib1B69CECC_gv_rICH_MINERAL_FIELD_COUNT = lv_index;
}

void lib1B69CECC_gf_DeleteAllMineralFields () {
    // Automatic Variable Declarations
    unitgroup auto68AF3500_g;
    int auto68AF3500_u;
    unit auto68AF3500_var;

    // Implementation
    auto68AF3500_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, 0, 0), 0);
    auto68AF3500_u = UnitGroupCount(auto68AF3500_g, c_unitCountAll);
    for (;; auto68AF3500_u -= 1) {
        auto68AF3500_var = UnitGroupUnitFromEnd(auto68AF3500_g, auto68AF3500_u);
        if (auto68AF3500_var == null) { break; }
        if (((lib1B69CECC_gf_is_rich_mineral_field(auto68AF3500_var) == true) || (lib1B69CECC_gf_is_mineral_field(auto68AF3500_var) == true))) {
            UnitRemove(auto68AF3500_var);
        }

    }
}

void lib1B69CECC_gf_DeletePlates () {
    // Automatic Variable Declarations
    unitgroup auto349ECCF7_g;
    int auto349ECCF7_u;
    unit auto349ECCF7_var;

    // Implementation
    auto349ECCF7_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), 0), 0);
    auto349ECCF7_u = UnitGroupCount(auto349ECCF7_g, c_unitCountAll);
    for (;; auto349ECCF7_u -= 1) {
        auto349ECCF7_var = UnitGroupUnitFromEnd(auto349ECCF7_g, auto349ECCF7_u);
        if (auto349ECCF7_var == null) { break; }
        if ((lib1B69CECC_gf_is_plates(auto349ECCF7_var) == true)) {
            UnitRemove(auto349ECCF7_var);
        }

    }
}

void lib1B69CECC_gf_DeleteRocks () {
    // Automatic Variable Declarations
    unitgroup auto13885749_g;
    int auto13885749_u;
    unit auto13885749_var;

    // Implementation
    auto13885749_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), 0), 0);
    auto13885749_u = UnitGroupCount(auto13885749_g, c_unitCountAll);
    for (;; auto13885749_u -= 1) {
        auto13885749_var = UnitGroupUnitFromEnd(auto13885749_g, auto13885749_u);
        if (auto13885749_var == null) { break; }
        if ((lib1B69CECC_gf_is_rocks(auto13885749_var) == true)) {
            UnitRemove(auto13885749_var);
        }

    }
}

void lib1B69CECC_gf_RecordStartingMapFeatures () {
    // Variable Declarations
    point lv_pos;
    fixed lv_facing;
    int lv_index;
    string lv_mineral_field_key;
    int lv_mineral_quantity;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mineral_field_key = "";

    // Implementation
    lib1B69CECC_gf_RecordBlueMineralsonMap();
    lib1B69CECC_gf_RecordRichMineralsonMap();
    lib1B69CECC_gf_RecordPlatesonMap();
    lib1B69CECC_gf_RecordRocksonMap();
}

void lib1B69CECC_gf_ResetGas () {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoCAA5C055_g;
    int autoCAA5C055_u;

    // Variable Initialization

    // Implementation
    autoCAA5C055_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCAA5C055_u = UnitGroupCount(autoCAA5C055_g, c_unitCountAll);
    for (;; autoCAA5C055_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoCAA5C055_g, autoCAA5C055_u);
        if (lv_unit == null) { break; }
        if (((UnitGetType(lv_unit) == "VespeneGeyser") || (UnitGetType(lv_unit) == "ProtossVespeneGeyser") || (UnitGetType(lv_unit) == "PurifierVespeneGeyser") || (UnitGetType(lv_unit) == "ShakurasVespeneGeyser") || (UnitGetType(lv_unit) == "SpacePlatformGeyser") || (UnitGetType(lv_unit) == "RichVespeneGeyser"))) {
            UnitSetPropertyFixed(lv_unit, c_unitPropResources, 5000.0);
        }

    }
}

void lib1B69CECC_gf_ResetVision () {
    // Variable Declarations
    int lv_aObserver;
    int lv_aPlayer;

    // Automatic Variable Declarations
    playergroup autoC031B8F3_g;
    playergroup auto26538C41_g;

    // Variable Initialization

    // Implementation
    autoC031B8F3_g = lib1B69CECC_gv_oBSERVERS;
    lv_aObserver = -1;
    while (true) {
        lv_aObserver = PlayerGroupNextPlayer(autoC031B8F3_g, lv_aObserver);
        if (lv_aObserver < 0) { break; }
        auto26538C41_g = lib1B69CECC_gv_pLAYERS;
        lv_aPlayer = -1;
        while (true) {
            lv_aPlayer = PlayerGroupNextPlayer(auto26538C41_g, lv_aPlayer);
            if (lv_aPlayer < 0) { break; }
            PlayerSetAlliance(lv_aPlayer, c_allianceIdVision, lv_aObserver, false);
        }
    }
}

void lib1B69CECC_gf_ResetMinerals () {
    // Variable Declarations
    point lv_pos;
    int lv_index;
    int lv_mineral_quantity;

    // Automatic Variable Declarations
    int auto0E57139E_ae;
    const int auto0E57139E_ai = 1;
    int autoF8F96ABC_ae;
    const int autoF8F96ABC_ai = 1;

    // Variable Initialization

    // Implementation
    lib1B69CECC_gf_DeleteAllMineralFields();
    auto0E57139E_ae = lib1B69CECC_gv_mINERAL_FIELD_COUNT;
    lv_index = 1;
    for ( ; ( (auto0E57139E_ai >= 0 && lv_index <= auto0E57139E_ae) || (auto0E57139E_ai < 0 && lv_index >= auto0E57139E_ae) ) ; lv_index += auto0E57139E_ai ) {
        lv_pos = DataTableGetPoint(true, lib1B69CECC_gf_compute_mineral_field_key(lv_index));
        lv_mineral_quantity = DataTableGetInt(true, lib1B69CECC_gf_compute_mineral_quantity_key(lv_index));
        UnitCreate(1, "MineralField", c_unitCreateIgnorePlacement, 0, lv_pos, 0.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_mineral_quantity);
    }
    autoF8F96ABC_ae = lib1B69CECC_gv_rICH_MINERAL_FIELD_COUNT;
    lv_index = 1;
    for ( ; ( (autoF8F96ABC_ai >= 0 && lv_index <= autoF8F96ABC_ae) || (autoF8F96ABC_ai < 0 && lv_index >= autoF8F96ABC_ae) ) ; lv_index += autoF8F96ABC_ai ) {
        lv_pos = DataTableGetPoint(true, lib1B69CECC_gf_compute_rich_mineral_field_key(lv_index));
        lv_mineral_quantity = DataTableGetInt(true, lib1B69CECC_gf_compute_rich_mineral_quantity_key(lv_index));
        UnitCreate(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, lv_pos, 0.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_mineral_quantity);
    }
}

void lib1B69CECC_gf_ResetPlates () {
    // Variable Declarations
    point lv_pos;
    int lv_index;
    int lv_mineral_quantity;

    // Automatic Variable Declarations
    int auto6CBC40A6_ae;
    const int auto6CBC40A6_ai = 1;

    // Variable Initialization

    // Implementation
    lib1B69CECC_gf_DeletePlates();
    auto6CBC40A6_ae = lib1B69CECC_gv_pLATES_COUNT;
    lv_index = 1;
    for ( ; ( (auto6CBC40A6_ai >= 0 && lv_index <= auto6CBC40A6_ae) || (auto6CBC40A6_ai < 0 && lv_index >= auto6CBC40A6_ae) ) ; lv_index += auto6CBC40A6_ai ) {
        lv_pos = DataTableGetPoint(true, lib1B69CECC_gf_compute_plates_key(lv_index));
        UnitCreate(1, "UnbuildablePlatesDestructible", c_unitCreateIgnorePlacement, 0, lv_pos, 0.0);
    }
}

void lib1B69CECC_gf_ResetRocks () {
    // Variable Declarations
    point lv_pos;
    int lv_index;
    int lv_mineral_quantity;

    // Automatic Variable Declarations
    int auto71CB371B_ae;
    const int auto71CB371B_ai = 1;

    // Variable Initialization

    // Implementation
    lib1B69CECC_gf_DeleteRocks();
    auto71CB371B_ae = lib1B69CECC_gv_featureCount;
    lv_index = 1;
    for ( ; ( (auto71CB371B_ai >= 0 && lv_index <= auto71CB371B_ae) || (auto71CB371B_ai < 0 && lv_index >= auto71CB371B_ae) ) ; lv_index += auto71CB371B_ai ) {
        UnitCreate(1, lib1B69CECC_gv_mapFeatures[lv_index].lv_unitType, c_unitCreateIgnorePlacement, 0, lib1B69CECC_gv_mapFeatures[lv_index].lv_position, lib1B69CECC_gv_mapFeatures[lv_index].lv_facing);
    }
}

void lib1B69CECC_gf_InitialiseRaceSelections () {
    // Variable Declarations
    int lv_aPlayer;

    // Automatic Variable Declarations
    playergroup auto37407480_g;

    // Variable Initialization

    // Implementation
    auto37407480_g = lib1B69CECC_gf_nonneutral_players();
    lv_aPlayer = -1;
    while (true) {
        lv_aPlayer = PlayerGroupNextPlayer(auto37407480_g, lv_aPlayer);
        if (lv_aPlayer < 0) { break; }
        DataTableSetInt(true, lib1B69CECC_gf_compute_player_race_key(lv_aPlayer), lib1B69CECC_gf_compute_race_index("Neut"));
    }
}

void lib1B69CECC_gf_ResetFogofWar () {
    // Automatic Variable Declarations
    playergroup autoEE90B737_g;
    int autoEE90B737_var;
    playergroup autoB07B4D9F_g;
    int autoB07B4D9F_var;

    // Implementation
    Wait(0.1, c_timeGame);
    autoEE90B737_g = lib1B69CECC_gf_nonneutral_players();
    autoEE90B737_var = -1;
    while (true) {
        autoEE90B737_var = PlayerGroupNextPlayer(autoEE90B737_g, autoEE90B737_var);
        if (autoEE90B737_var < 0) { break; }
        VisRevealArea(autoEE90B737_var, RegionEntireMap(), 0.1, false);
    }
    Wait(0.2, c_timeGame);
    autoB07B4D9F_g = lib1B69CECC_gf_nonneutral_players();
    autoB07B4D9F_var = -1;
    while (true) {
        autoB07B4D9F_var = PlayerGroupNextPlayer(autoB07B4D9F_g, autoB07B4D9F_var);
        if (autoB07B4D9F_var < 0) { break; }
        VisExploreArea(autoB07B4D9F_var, RegionEntireMap(), false, false);
    }
}

void lib1B69CECC_gf_DisableResourceTrading () {
    // Variable Declarations
    int lv_aPlayer;
    int lv_bPlayer2;

    // Automatic Variable Declarations
    playergroup autoA9BF1F9F_g;
    playergroup auto01013A5D_g;

    // Variable Initialization

    // Implementation
    UISetFrameVisible(lib1B69CECC_gf_nonneutral_players(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lib1B69CECC_gf_nonneutral_players(), c_syncFrameTypeTeamResourceButton, false);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    autoA9BF1F9F_g = lib1B69CECC_gf_nonneutral_players();
    lv_aPlayer = -1;
    while (true) {
        lv_aPlayer = PlayerGroupNextPlayer(autoA9BF1F9F_g, lv_aPlayer);
        if (lv_aPlayer < 0) { break; }
        auto01013A5D_g = lib1B69CECC_gf_nonneutral_players();
        lv_bPlayer2 = -1;
        while (true) {
            lv_bPlayer2 = PlayerGroupNextPlayer(auto01013A5D_g, lv_bPlayer2);
            if (lv_bPlayer2 < 0) { break; }
            if ((lv_aPlayer != lv_bPlayer2)) {
                PlayerSetAlliance(lv_aPlayer, c_allianceIdSpend, lv_bPlayer2, false);
            }

        }
    }
}

void lib1B69CECC_gf_ResetAlliances () {
    // Variable Declarations
    playergroup lv_nonneutral;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nonneutral = PlayerGroupEmpty();

    // Implementation
    lv_nonneutral = lib1B69CECC_gf_nonneutral_players();
    libNtve_gf_SetPlayerGroupAlliance(lv_nonneutral, libNtve_ge_AllianceSetting_Ally);
}

void lib1B69CECC_gf_ResetTechFunction () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto7B21BD26_g;

    // Variable Initialization

    // Implementation
    auto7B21BD26_g = lib1B69CECC_gf_nonneutral_players();
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto7B21BD26_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        lib1B69CECC_gf_ResetTechForPlayer(lv_intPlayer);
    }
}

void lib1B69CECC_gf_CleanUpCreep () {
    // Automatic Variable Declarations
    // Implementation
    CreepModify(RegionGetCenter(RegionEntireMap()), 50000.0, false, false);
}

void lib1B69CECC_gf_CleanUpPlayersAndObservers () {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gv_pLAYERS = PlayerGroupEmpty();
    lib1B69CECC_gv_oBSERVERS = PlayerGroupEmpty();
}

void lib1B69CECC_gf_KillAllPlayerUnits () {
    // Variable Declarations
    unit lv_aUnit;
    int lv_aPlayer;
    playergroup lv_nonneutral;

    // Automatic Variable Declarations
    playergroup autoF7FB8F78_g;

    // Variable Initialization
    lv_nonneutral = PlayerGroupEmpty();

    // Implementation
    lv_nonneutral = lib1B69CECC_gf_nonneutral_players();
    autoF7FB8F78_g = lv_nonneutral;
    lv_aPlayer = -1;
    while (true) {
        lv_aPlayer = PlayerGroupNextPlayer(autoF7FB8F78_g, lv_aPlayer);
        if (lv_aPlayer < 0) { break; }
        lib1B69CECC_gf_KillPlayerRealUnits(lv_aPlayer);
        lib1B69CECC_gf_KillPlayerRealUnits(lv_aPlayer);
    }
}

void lib1B69CECC_gf_ResetGame () {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gf_KillAllPlayerUnits();
    lib1B69CECC_gf_ResetVision();
    lib1B69CECC_gf_ResetGas();
    lib1B69CECC_gf_ResetMinerals();
    lib1B69CECC_gf_ResetPlates();
    lib1B69CECC_gf_ResetRocks();
    lib1B69CECC_gf_CleanUpCreep();
    lib1B69CECC_gf_CleanUpPlayersAndObservers();
    lib1B69CECC_gf_ResetFogofWar();
    lib1B69CECC_gf_ResetTechFunction();
    lib1B69CECC_gf_ResetRevealStatus();
    lib1B69CECC_gf_StopClock();
    lib1B69CECC_gf_StopStalemateDetection();
    lib1B69CECC_gf_HideGenetronEnergyDisplay();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    lib1B69CECC_gf_KillAllPlayerUnits();
    lib1B69CECC_gf_ResetLobbyUI();
}

void lib1B69CECC_gf_StartVictoryDetection () {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gv_DETECT_VICTORY = true;
}

void lib1B69CECC_gf_StopVictoryDetection () {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gv_DETECT_VICTORY = false;
}

int lib1B69CECC_gf_time_remaining (structref<lib1B69CECC_gs_LobbyTimer> lp_theLobbyTimer) {
    // Automatic Variable Declarations
    // Implementation
    return lib1B69CECC_gv_count;
}

void lib1B69CECC_gf_StopTimer () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1B69CECC_gv_lobbyTimer.lv_isStarted == true)) {
        libNtve_gf_StopTimer(lib1B69CECC_gv_lobbyTimer.lv_timer);
        lib1B69CECC_gv_count = lib1B69CECC_gv_lOBBY_COUNTDOWN_TIME;
    }

    lib1B69CECC_gv_lobbyTimer.lv_isStarted = false;
    lib1B69CECC_gf_HideLobbyTimerMessage();
}

void lib1B69CECC_gf_StartTimer () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1B69CECC_gv_lobbyTimer.lv_isStarted == true)) {
    }
    else {
        lib1B69CECC_gv_lobbyTimer.lv_isStarted = true;
        TimerStart(lib1B69CECC_gv_lobbyTimer.lv_timer, 1.0, true, c_timeGame);
        SoundPlayForPlayer(SoundLink("UI_BNet_Countdown", -1), c_maxPlayers, lib1B69CECC_gf_nonneutral_players(), 100.0, 0.0);
    }
}

bool lib1B69CECC_gf_IsLobbyAvailable (structref<lib1B69CECC_gs_LobbyTimer> lp_theLobbyTimer) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1B69CECC_gf_time_remaining(lib1B69CECC_gv_lobbyTimer) <= lib1B69CECC_gv_jOIN_LOBBY_TIMEOUT_THRESHOLD)) {
        return false;
    }
    else {
        return true;
    }
    return true;
}

bool lib1B69CECC_gf_IsEnoughPlayersToStart () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(lib1B69CECC_gv_theLobby.lv_players) >= 2)) {
        return true;
    }
    else {
        return false;
    }
    return false;
}

string lib1B69CECC_gf_choose_race (int lp_race_index) {
    // Variable Declarations
    string lv_race;
    int lv_new_idx;

    // Automatic Variable Declarations
    int autoBDC9761C_val;

    // Variable Initialization

    // Implementation
    lv_new_idx = lp_race_index;
    if ((lp_race_index == 1)) {
        lv_new_idx = RandomInt(2, 7);
    }

    if ((lp_race_index > 7)) {
        lv_new_idx = RandomInt(2, 7);
    }

    autoBDC9761C_val = lv_new_idx;
    if (autoBDC9761C_val == 2) {
        lv_race = "Terr";
    }
    else if (autoBDC9761C_val == 3) {
        lv_race = "Zerg";
    }
    else if (autoBDC9761C_val == 4) {
        lv_race = "Prot";
    }
    else if (autoBDC9761C_val == 5) {
        lv_race = "Gen";
    }
    else if (autoBDC9761C_val == 6) {
        lv_race = "Xayi";
    }
    else if (autoBDC9761C_val == 7) {
        lv_race = "Keir";
    }
    else {
        lv_race = "Gen";
    }
    return lv_race;
}

void lib1B69CECC_gf_InitialisePlayer (int lp_player, string lp_startlocation) {
    // Variable Declarations
    int lv_race_index;
    string lv_race_key;
    string lv_race;
    text lv_player_message;

    // Automatic Variable Declarations
    unitgroup auto72918860_g;
    int auto72918860_u;
    unit auto72918860_var;

    // Variable Initialization
    lv_race_key = "";

    // Implementation
    lv_race_key = lib1B69CECC_gf_compute_player_race_key(lp_player);
    lv_race_index = DataTableGetInt(true, lv_race_key);
    lv_race = lib1B69CECC_gf_choose_race(lv_race_index);
    PlayerSetRace(lp_player, lv_race);
    lv_player_message = (StringExternal("Param/Value/lib_1B69CECC_4D9A8A36") + PlayerName(lp_player) + StringExternal("Param/Value/lib_1B69CECC_242CCF1F") + lib1B69CECC_gf_race_to_text(lv_race_index) + StringExternal("Param/Value/lib_1B69CECC_BF39C51C"));
    UIDisplayMessage(lib1B69CECC_gf_nonneutral_players(), c_messageAreaSubtitle, lv_player_message);
    MeleeInitResourcesForPlayer(lp_player, lv_race);
    if ((lv_race == "Zerg")) {
        MeleeInitUnitsForPlayer(lp_player, "Zerg", PointFromName(lp_startlocation));
        CreepModify(PointFromName(lp_startlocation), 11.5, true, false);
        auto72918860_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
        auto72918860_u = UnitGroupCount(auto72918860_g, c_unitCountAll);
        for (;; auto72918860_u -= 1) {
            auto72918860_var = UnitGroupUnitFromEnd(auto72918860_g, auto72918860_u);
            if (auto72918860_var == null) { break; }
            if ((UnitGetType(auto72918860_var) == "Hatchery")) {
                UnitCreateEffectUnit(auto72918860_var, "SpawnMutantLarvaApplySpawnBehavior", auto72918860_var);
            }

        }
    }
    else {
        MeleeInitUnitsForPlayer(lp_player, lv_race, PointFromName(lp_startlocation));
    }
}

void lib1B69CECC_gf_InitialiseGame (playergroup lp_lobby_Players) {
    int init_i;

    // Variable Declarations
    string[3] lv_start_locations;
    int lv_aPlayer;
    int lv_idx;

    // Automatic Variable Declarations
    playergroup autoEF8BA5EB_g;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_start_locations[init_i] = "";
    }

    // Implementation
    lib1B69CECC_gf_HideLobby();
    SoundPlayForPlayer(SoundLink("UI_BnetCountdown321", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(lib1B69CECC_gf_nonneutral_players(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1B69CECC_890AFE24"));
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    lv_start_locations[0] = lib1B69CECC_gv_sTARTLOCATION_1;
    lv_start_locations[1] = lib1B69CECC_gv_sTARTLOCATION_2;
    lib1B69CECC_gv_pLAYERS = lib1B69CECC_gf_ChoosePlayersFromLobby(lp_lobby_Players);
    lib1B69CECC_gv_oBSERVERS = lib1B69CECC_gf_ChooseObserversFromLobby(lib1B69CECC_gf_nonneutral_players(), lib1B69CECC_gv_pLAYERS);
    lv_idx = 0;
    autoEF8BA5EB_g = lib1B69CECC_gv_pLAYERS;
    lv_aPlayer = -1;
    while (true) {
        lv_aPlayer = PlayerGroupNextPlayer(autoEF8BA5EB_g, lv_aPlayer);
        if (lv_aPlayer < 0) { break; }
        if ((lv_idx < 2)) {
            lib1B69CECC_gf_InitialisePlayer(lv_aPlayer, lv_start_locations[lv_idx]);
            lv_idx = (lv_idx + 1);
        }

    }
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lib1B69CECC_gv_pLAYERS, lib1B69CECC_gv_oBSERVERS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lib1B69CECC_gv_oBSERVERS, lib1B69CECC_gv_pLAYERS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetPlayerGroupAlliance(lib1B69CECC_gv_pLAYERS, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetPlayerGroupAlliance(lib1B69CECC_gv_oBSERVERS, libNtve_ge_AllianceSetting_Ally);
    lib1B69CECC_gf_StartVictoryDetection();
    lib1B69CECC_gf_EnableObserverUI(lib1B69CECC_gv_oBSERVERS, lib1B69CECC_gv_pLAYERS);
    lib1B69CECC_gf_EnablePlayerUI(lib1B69CECC_gv_pLAYERS);
    lib1B69CECC_gf_StartClock();
    lib1B69CECC_gf_InitialiseStalemateDetection();
    lib1B69CECC_gf_ResetLeaderPanel();
    lib1B69CECC_gf_HideLobbyTimerMessage();
}

playergroup lib1B69CECC_gf_ChoosePlayersFromLobby (playergroup lp_lobby) {
    // Variable Declarations
    playergroup lv_players;
    playergroup lv_temp;
    int lv_player;
    int lv_selected;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = PlayerGroupEmpty();
    lv_temp = PlayerGroupEmpty();
    lv_index = 1;

    // Implementation
    lv_temp = PlayerGroupCopy(lp_lobby);
    lv_players = lib1B69CECC_gf_choose_a_player(lv_temp);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_players, lv_temp);
    lv_players = libNtve_gf_UnionOfPlayerGroups(lv_players, lib1B69CECC_gf_choose_a_player(lv_temp));
    return lv_players;
}

playergroup lib1B69CECC_gf_choose_a_player (playergroup lp_players_in) {
    // Variable Declarations
    playergroup lv_players;
    playergroup lv_temp;
    int lv_player;
    int lv_selected;
    int lv_index;

    // Automatic Variable Declarations
    playergroup autoAB2C7C44_g;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();
    lv_temp = PlayerGroupEmpty();
    lv_index = 1;

    // Implementation
    lv_temp = PlayerGroupCopy(lp_players_in);
    lv_index = 1;
    lv_selected = RandomInt(1, PlayerGroupCount(lv_temp));
    autoAB2C7C44_g = lv_temp;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoAB2C7C44_g, lv_player);
        if (lv_player < 0) { break; }
        if ((lv_index == lv_selected)) {
            PlayerGroupAdd(lv_players, lv_player);
        }

        lv_index = (lv_index + 1);
    }
    return lv_players;
}

playergroup lib1B69CECC_gf_ChooseObserversFromLobby (playergroup lp_lobby, playergroup lp_players) {
    // Variable Declarations
    playergroup lv_observers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_observers = PlayerGroupEmpty();

    // Implementation
    lv_observers = PlayerGroupCopy(lp_lobby);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_observers);
    return lv_observers;
}

void lib1B69CECC_gf_ResetLobbyUI () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1B69CECC_gf_EnableLobbyUI();
    lib1B69CECC_gf_ClearLobby();
    lib1B69CECC_gf_ShowLobbyUI();
}

text lib1B69CECC_gf_format_player_name (int lp_player) {
    // Variable Declarations
    text lv_race_icon;
    string lv_race_key;
    int lv_race_index;

    // Automatic Variable Declarations
    int auto01508744_val;

    // Variable Initialization
    lv_race_key = "";

    // Implementation
    lv_race_key = lib1B69CECC_gf_compute_player_race_key(lp_player);
    lv_race_index = DataTableGetInt(true, lv_race_key);
    auto01508744_val = lv_race_index;
    if (auto01508744_val == 2) {
        lv_race_icon = StringExternal("Param/Value/lib_1B69CECC_8A3BD15D");
    }
    else if (auto01508744_val == 3) {
        lv_race_icon = StringExternal("Param/Value/lib_1B69CECC_C8F6245F");
    }
    else if (auto01508744_val == 4) {
        lv_race_icon = StringExternal("Param/Value/lib_1B69CECC_6E1545DC");
    }
    else if (auto01508744_val == 5) {
        lv_race_icon = StringExternal("Param/Value/lib_1B69CECC_828333EB");
    }
    else if (auto01508744_val == 6) {
        lv_race_icon = StringExternal("Param/Value/lib_1B69CECC_8C9853A6");
    }
    else if (auto01508744_val == 7) {
        lv_race_icon = StringExternal("Param/Value/lib_1B69CECC_8B1E82EA");
    }
    else if (auto01508744_val == 1) {
        lv_race_icon = StringExternal("Param/Value/lib_1B69CECC_BE3BC2C3");
    }
    else {
        lv_race_icon = StringExternal("Param/Value/lib_1B69CECC_969F809F");
    }
    return (lv_race_icon + PlayerName(lp_player));
}

text lib1B69CECC_gf_race_to_text (int lp_race) {
    // Automatic Variable Declarations
    int autoE285AC27_val;

    // Implementation
    autoE285AC27_val = lp_race;
    if (autoE285AC27_val == 1) {
        return StringExternal("Param/Value/lib_1B69CECC_D865D5BC");
    }
    else if (autoE285AC27_val == 2) {
        return StringExternal("Param/Value/lib_1B69CECC_97516E28");
    }
    else if (autoE285AC27_val == 3) {
        return StringExternal("Param/Value/lib_1B69CECC_F22BBE30");
    }
    else if (autoE285AC27_val == 4) {
        return StringExternal("Param/Value/lib_1B69CECC_344D4A21");
    }
    else if (autoE285AC27_val == 5) {
        return StringExternal("Param/Value/lib_1B69CECC_DABD0022");
    }
    else if (autoE285AC27_val == 6) {
        return StringExternal("Param/Value/lib_1B69CECC_39D4FFFC");
    }
    else if (autoE285AC27_val == 7) {
        return StringExternal("Param/Value/lib_1B69CECC_3C13E2A6");
    }
    else {
        return StringExternal("Param/Value/lib_1B69CECC_1B3257B4");
    }
}

text lib1B69CECC_gf_convertSecondsToTime (int lp_intTotalSeconds) {
    // Variable Declarations
    int lv_intHours;
    int lv_intMinutes;
    int lv_intSeconds;
    text lv_txtText;
    text lv_txtSeconds;
    text lv_txtMinutes;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intSeconds = lp_intTotalSeconds;
    if ((lv_intSeconds > 3600)) {
        lv_intHours = FloorI((IntToFixed(lv_intSeconds) / 3600.0));
        lv_intSeconds = ModI(lv_intSeconds, 3600);
    }

    lv_intMinutes = FloorI((IntToFixed(lv_intSeconds) / 60.0));
    lv_intSeconds = ModI(lv_intSeconds, 60);
    lv_txtMinutes = IntToText(lv_intMinutes);
    if (((lv_intHours > 0) && (lv_intMinutes < 10))) {
        lv_txtMinutes = (StringExternal("Param/Value/lib_1B69CECC_AD0F3D2C") + lv_txtMinutes);
    }

    lv_txtSeconds = IntToText(lv_intSeconds);
    if ((lv_intSeconds < 10)) {
        lv_txtSeconds = (StringExternal("Param/Value/lib_1B69CECC_CF9CF4BB") + lv_txtSeconds);
    }

    lv_txtText = (StringToText("") + lv_txtMinutes + StringExternal("Param/Value/lib_1B69CECC_EEFA286E") + lv_txtSeconds + StringToText(""));
    if ((lv_intHours > 0)) {
        lv_txtText = (IntToText(lv_intHours) + StringExternal("Param/Value/lib_1B69CECC_DA9C0C8E") + lv_txtText);
    }

    return lv_txtText;
}

playergroup lib1B69CECC_gf_nonneutral_players () {
    // Variable Declarations
    playergroup lv_nonneutral;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nonneutral = PlayerGroupEmpty();

    // Implementation
    lv_nonneutral = PlayerGroupAll();
    PlayerGroupRemove(lv_nonneutral, 0);
    return lv_nonneutral;
}

bool lib1B69CECC_gf_is_mineral_field (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "BattleStationMineralField") || (UnitGetType(lp_unit) == "BattleStationMineralField750") || (UnitGetType(lp_unit) == "LabMineralField750") || (UnitGetType(lp_unit) == "LabMineralField") || (UnitGetType(lp_unit) == "MineralField") || (UnitGetType(lp_unit) == "MineralField450") || (UnitGetType(lp_unit) == "MineralField750") || (UnitGetType(lp_unit) == "MineralFieldOpaque900") || (UnitGetType(lp_unit) == "MineralFieldOpaque") || (UnitGetType(lp_unit) == "PurifierMineralField") || (UnitGetType(lp_unit) == "PurifierMineralField750"))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1B69CECC_gf_is_plates (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "UnbuildablePlatesDestructible") || (UnitGetType(lp_unit) == "UnbuildableBricksDestructible") || (UnitGetType(lp_unit) == "UnbuildableRocksDestructible") || (UnitGetType(lp_unit) == "UnbuildableRocksUnit") || (UnitGetType(lp_unit) == "UnbuildableRocksSmallUnit") || (UnitGetType(lp_unit) == "UnbuildableBricksUnit") || (UnitGetType(lp_unit) == "UnbuildableBricksSmallUnit") || (UnitGetType(lp_unit) == "UnbuildablePlatesUnit") || (UnitGetType(lp_unit) == "UnbuildablePlatesSmallUnit"))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1B69CECC_gf_is_rocks (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "DestructibleRock2x4Horizontal") || (UnitGetType(lp_unit) == "DestructibleRock2x4Vertical") || (UnitGetType(lp_unit) == "DestructibleRock2x6Horizontal") || (UnitGetType(lp_unit) == "DestructibleRock2x6Vertical") || (UnitGetType(lp_unit) == "DestructibleRock4x4") || (UnitGetType(lp_unit) == "CollapsibleRockTowerDebris") || (UnitGetType(lp_unit) == "DestructibleRock6x6") || (UnitGetType(lp_unit) == "DestructibleRock6x6Weak") || (UnitGetType(lp_unit) == "DestructibleRockEx12x4Horizontal") || (UnitGetType(lp_unit) == "DestructibleRockEx12x4Vertical") || (UnitGetType(lp_unit) == "DestructibleRockEx12x6Horizontal") || (UnitGetType(lp_unit) == "DestructibleRockEx12x6Vertical") || (UnitGetType(lp_unit) == "DestructibleRockEx14x4") || (UnitGetType(lp_unit) == "DestructibleRockEx16x6") || (UnitGetType(lp_unit) == "DestructibleRockEx1DiagonalHugeBLUR") || (UnitGetType(lp_unit) == "DestructibleRockEx1DiagonalHugeULBR") || (UnitGetType(lp_unit) == "DestructibleRockEx1HorizontalHuge") || (UnitGetType(lp_unit) == "DestructibleRockEx1VerticalHuge") || (UnitGetType(lp_unit) == "DestructibleRampDiagonalHugeBLUR") || (UnitGetType(lp_unit) == "DestructibleRampDiagonalHugeULBR") || (UnitGetType(lp_unit) == "DestructibleRampHorizontalHuge") || (UnitGetType(lp_unit) == "DestructibleRampVerticalHuge") || (UnitGetType(lp_unit) == "Rocks2x2NonConjoined") || (UnitGetType(lp_unit) == "CollapsibleRockTowerPushUnit") || (UnitGetType(lp_unit) == "CollapsibleRockTowerDebrisRampLeft") || (UnitGetType(lp_unit) == "CollapsibleRockTowerDebrisRampLeftGreen") || (UnitGetType(lp_unit) == "CollapsibleRockTowerDebrisRampRight") || (UnitGetType(lp_unit) == "CollapsibleRockTowerDebrisRampRightGreen") || (UnitGetType(lp_unit) == "BraxisAlphaDestructible1x1") || (UnitGetType(lp_unit) == "BraxisAlphaDestructible2x2") || (UnitGetType(lp_unit) == "CollapsiblePurifierTowerDebris") || (UnitGetType(lp_unit) == "CollapsibleRockTowerPushUnitRampLeftGreen") || (UnitGetType(lp_unit) == "CollapsibleRockTowerPushUnitRampLeft") || (UnitGetType(lp_unit) == "CollapsibleRockTowerPushUnitRampRightGreen") || (UnitGetType(lp_unit) == "CollapsibleRockTowerPushUnitRampRight") || (UnitGetType(lp_unit) == "DestructibleDebris4x4") || (UnitGetType(lp_unit) == "CollapsibleTerranTowerDebris") || (UnitGetType(lp_unit) == "DestructibleDebris6x6") || (UnitGetType(lp_unit) == "DestructibleCityDebris2x4Horizontal") || (UnitGetType(lp_unit) == "DestructibleCityDebris2x4Vertical") || (UnitGetType(lp_unit) == "DestructibleCityDebris2x6Horizontal") || (UnitGetType(lp_unit) == "DestructibleCityDebris2x6Vertical") || (UnitGetType(lp_unit) == "DestructibleCityDebris4x4") || (UnitGetType(lp_unit) == "DestructibleCityDebris6x6") || (UnitGetType(lp_unit) == "DestructibleCityDebrisHugeDiagonalBLUR") || (UnitGetType(lp_unit) == "DestructibleCityDebrisHugeDiagonalULBR") || (UnitGetType(lp_unit) == "DestructibleDebrisRampDiagonalHugeBLUR") || (UnitGetType(lp_unit) == "DestructibleDebrisRampDiagonalHugeULBR") || (UnitGetType(lp_unit) == "Debris2x2NonConjoined") || (UnitGetType(lp_unit) == "DebrisRampLeft") || (UnitGetType(lp_unit) == "DebrisRampRight") || (UnitGetType(lp_unit) == "DestructibleZergInfestation3x3") || (UnitGetType(lp_unit) == "DestructibleExpeditionGate6x6") || (UnitGetType(lp_unit) == "DestructibleIce2x4Horizontal") || (UnitGetType(lp_unit) == "DestructibleIce2x4Vertical") || (UnitGetType(lp_unit) == "DestructibleIce2x6Horizontal") || (UnitGetType(lp_unit) == "DestructibleIce2x6Vertical") || (UnitGetType(lp_unit) == "DestructibleIce4x4") || (UnitGetType(lp_unit) == "DestructibleIce6x6") || (UnitGetType(lp_unit) == "DestructibleIceDiagonalHugeBLUR") || (UnitGetType(lp_unit) == "DestructibleIceDiagonalHugeULBR") || (UnitGetType(lp_unit) == "DestructibleIceHorizontalHuge") || (UnitGetType(lp_unit) == "DestructibleIceVerticalHuge") || (UnitGetType(lp_unit) == "Ice2x2NonConjoined"))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1B69CECC_gf_is_rich_mineral_field (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "PurifierRichMineralField") || (UnitGetType(lp_unit) == "PurifierRichMineralField750") || (UnitGetType(lp_unit) == "RichMineralField") || (UnitGetType(lp_unit) == "RichMineralField750"))) {
        return true;
    }
    else {
        return false;
    }
}

string lib1B69CECC_gf_compute_player_race_key (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return ("race_player_" + IntToString(lp_player));
}

string lib1B69CECC_gf_compute_mineral_field_key (int lp_mineralIndex) {
    // Automatic Variable Declarations
    // Implementation
    return ("mineral_field_" + IntToString(lp_mineralIndex));
}

string lib1B69CECC_gf_compute_plates_key (int lp_mineralIndex) {
    // Automatic Variable Declarations
    // Implementation
    return ("plates_" + IntToString(lp_mineralIndex));
}

string lib1B69CECC_gf_compute_rich_mineral_field_key (int lp_mineralIndex) {
    // Automatic Variable Declarations
    // Implementation
    return ("rich_mineral_field_" + IntToString(lp_mineralIndex));
}

string lib1B69CECC_gf_compute_mineral_quantity_key (int lp_mineralIndex) {
    // Automatic Variable Declarations
    // Implementation
    return ("mineral_quantity_" + IntToString(lp_mineralIndex));
}

string lib1B69CECC_gf_compute_rich_mineral_quantity_key (int lp_mineralIndex) {
    // Automatic Variable Declarations
    // Implementation
    return ("rich_mineral_quantity_" + IntToString(lp_mineralIndex));
}

int lib1B69CECC_gf_compute_race_index (string lp_race) {
    // Automatic Variable Declarations
    string auto76A18448_val;

    // Implementation
    auto76A18448_val = lp_race;
    if (auto76A18448_val == "Neut") {
        return 1;
    }
    else if (auto76A18448_val == "Terr") {
        return 2;
    }
    else if (auto76A18448_val == "Zerg") {
        return 3;
    }
    else if (auto76A18448_val == "Prot") {
        return 4;
    }
    else if (auto76A18448_val == "Gen") {
        return 5;
    }
    else if (auto76A18448_val == "Xayi") {
        return 6;
    }
    else if (auto76A18448_val == "Keir") {
        return 7;
    }
    else {
        return 1;
    }
}

string lib1B69CECC_gf_compute_race_from_index (int lp_race_index) {
    // Automatic Variable Declarations
    int auto0B0EF7CF_val;

    // Implementation
    auto0B0EF7CF_val = lp_race_index;
    if (auto0B0EF7CF_val == 1) {
        return "Neut";
    }
    else if (auto0B0EF7CF_val == 2) {
        return "Terr";
    }
    else if (auto0B0EF7CF_val == 3) {
        return "Zerg";
    }
    else if (auto0B0EF7CF_val == 4) {
        return "Prot";
    }
    else if (auto0B0EF7CF_val == 5) {
        return "Gen";
    }
    else if (auto0B0EF7CF_val == 6) {
        return "Xayi";
    }
    else if (auto0B0EF7CF_val == 7) {
        return "Keir";
    }
    else {
        return "Neut";
    }
}

bool lib1B69CECC_gf_is_gas_structure (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "Extractor") || (UnitGetType(lp_unit) == "ExtractorRich") || (UnitGetType(lp_unit) == "Refinery") || (UnitGetType(lp_unit) == "RefineryRich") || (UnitGetType(lp_unit) == "Assimilator") || (UnitGetType(lp_unit) == "AssimilatorRich") || (UnitGetType(lp_unit) == "Siphoner") || (UnitGetType(lp_unit) == "SiphonerRich") || (UnitGetType(lp_unit) == "Formulator") || (UnitGetType(lp_unit) == "FormulatorRich") || (UnitGetType(lp_unit) == "FilteringPlant") || (UnitGetType(lp_unit) == "FilteringPlantRich"))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1B69CECC_gf_is_town_centre (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "Nexus") || (UnitGetType(lp_unit) == "CommandCenter") || (UnitGetType(lp_unit) == "CommandCenterFlying") || (UnitGetType(lp_unit) == "OrbitalCommand") || (UnitGetType(lp_unit) == "OrbitalCommandFlying") || (UnitGetType(lp_unit) == "PlanetaryFortress") || (UnitGetType(lp_unit) == "Hatchery") || (UnitGetType(lp_unit) == "Lair") || (UnitGetType(lp_unit) == "Hive") || (UnitGetType(lp_unit) == "Citadel") || (UnitGetType(lp_unit) == "CitadelCharged") || (UnitGetType(lp_unit) == "ScavengerNest") || (UnitGetType(lp_unit) == "ProcessingCore"))) {
        return true;
    }
    else {
        return false;
    }
}

playergroup lib1B69CECC_gf_compute_winners (playergroup lp_players, playergroup lp_losers) {
    // Variable Declarations
    playergroup lv_winners;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_winners = PlayerGroupEmpty();

    // Implementation
    lv_winners = PlayerGroupCopy(lp_players);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_losers, lv_winners);
    return lv_winners;
}

void lib1B69CECC_gf_HideGenetronEnergyDisplay () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_genetron_energy_panel, PlayerGroupAll(), false);
    DialogControlSetVisible(lib1B69CECC_gv_ui_genetron_energy_display, PlayerGroupAll(), false);
}

void lib1B69CECC_gf_DisplayGenetronEnergy (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerRace(lp_player) == "Gen")) {
        DialogControlSetVisible(lib1B69CECC_gv_ui_genetron_energy_panel, PlayerGroupSingle(lp_player), true);
    }

}

void lib1B69CECC_gf_InitialiseEnergyDisplay () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GenetronEnergyDisplay");
    lib1B69CECC_gv_ui_genetron_energy_display = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/GenetronEnergyDisplay/EnergyCurrent");
    lib1B69CECC_gv_ui_genetron_energy_current = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/GenetronEnergyDisplay/EnergyMax");
    lib1B69CECC_gv_ui_genetron_energy_max = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/GenetronEnergyPanel");
    lib1B69CECC_gv_ui_genetron_energy_panel = DialogControlLastCreated();
    lib1B69CECC_gf_HideGenetronEnergyDisplay();
}

void lib1B69CECC_gf_HideStalemateWarning () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_stalemate_dialog, lib1B69CECC_gf_nonneutral_players(), false);
    libNtve_gf_StopTimer(lib1B69CECC_gv_tmr_stalemate_message_refesh);
}

void lib1B69CECC_gf_DisplayStalemateWarning () {
    // Variable Declarations
    fixed lv_tm;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_stalemate_dialog, lib1B69CECC_gf_nonneutral_players(), true);
    TimerStart(lib1B69CECC_gv_tmr_stalemate_message_refesh, 1.0, true, c_timeGame);
}

void lib1B69CECC_gf_InitialiseStalemateDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/StalemateMessageDialog");
    lib1B69CECC_gv_ui_stalemate_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/StalemateMessageDialog/StalemateMessage");
    lib1B69CECC_gv_ui_reveal_label2 = DialogControlLastCreated();
    DialogControlSetVisible(lib1B69CECC_gv_ui_stalemate_dialog, PlayerGroupAll(), false);
}

void lib1B69CECC_gf_ResetLeaderPanel () {
    // Automatic Variable Declarations
    playergroup auto27C7B9A0_g;
    int auto27C7B9A0_var;
    playergroup auto91CAD639_g;
    int auto91CAD639_var;

    // Implementation
    auto27C7B9A0_g = lib1B69CECC_gv_oBSERVERS;
    auto27C7B9A0_var = -1;
    while (true) {
        auto27C7B9A0_var = PlayerGroupNextPlayer(auto27C7B9A0_g, auto27C7B9A0_var);
        if (auto27C7B9A0_var < 0) { break; }
        PlayerSetState(auto27C7B9A0_var, c_playerStateDisplayInLeaderPanel, false);
    }
    auto91CAD639_g = lib1B69CECC_gv_pLAYERS;
    auto91CAD639_var = -1;
    while (true) {
        auto91CAD639_var = PlayerGroupNextPlayer(auto91CAD639_g, auto91CAD639_var);
        if (auto91CAD639_var < 0) { break; }
        PlayerSetState(auto91CAD639_var, c_playerStateDisplayInLeaderPanel, true);
    }
}

int lib1B69CECC_gf_DialogItemFromHookup (int lp_dialogItemType, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(lp_dialogItemType, lp_name);
    return DialogControlLastCreated();
}

void lib1B69CECC_gf_InitialiseProductionTab () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreateInPanelFromTemplate(lib1B69CECC_gf_DialogItemFromHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/PeepLeaderPanel"), c_triggerControlTypePanel, "GameUI/GameUI/UIContainer/FullscreenUpperContainer/LeaderPanel");
    lib1B69CECC_gv_ui_production_tab = DialogControlLastCreated();
}

void lib1B69CECC_gf_InitialiseResourceIcons () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/PlayerOneStats");
    lib1B69CECC_gv_playerOne.lv_ui_player_stats = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerOneStats/MineralsLabel");
    lib1B69CECC_gv_playerOne.lv_ui_minerals_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerOneStats/GasLabel");
    lib1B69CECC_gv_playerOne.lv_ui_gas_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerOneStats/SupplyCurrent");
    lib1B69CECC_gv_playerOne.lv_ui_supplycurrent_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerOneStats/SupplyMax");
    lib1B69CECC_gv_playerOne.lv_ui_supplymax_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerOneStats/EnergyCurrent");
    lib1B69CECC_gv_playerOne.lv_ui_energycurrent_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerOneStats/EnergyMax");
    lib1B69CECC_gv_playerOne.lv_ui_energymax_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/PlayerOneStats/PlayerName");
    lib1B69CECC_gv_playerOne.lv_ui_player_name = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/PlayerTwoStats");
    lib1B69CECC_gv_playerTwo.lv_ui_player_stats = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerTwoStats/MineralsLabel");
    lib1B69CECC_gv_playerTwo.lv_ui_minerals_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerTwoStats/GasLabel");
    lib1B69CECC_gv_playerTwo.lv_ui_gas_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerTwoStats/SupplyCurrent");
    lib1B69CECC_gv_playerTwo.lv_ui_supplycurrent_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerTwoStats/SupplyMax");
    lib1B69CECC_gv_playerTwo.lv_ui_supplymax_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerTwoStats/EnergyCurrent");
    lib1B69CECC_gv_playerTwo.lv_ui_energycurrent_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, "UIContainer/FullscreenUpperContainer/PlayerTwoStats/EnergyMax");
    lib1B69CECC_gv_playerTwo.lv_ui_energymax_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/PlayerTwoStats/PlayerName");
    lib1B69CECC_gv_playerTwo.lv_ui_player_name = DialogControlLastCreated();
    DialogControlSetVisible(lib1B69CECC_gv_playerOne.lv_ui_player_stats, PlayerGroupAll(), false);
    DialogControlSetVisible(lib1B69CECC_gv_playerTwo.lv_ui_player_stats, PlayerGroupAll(), false);
}

void lib1B69CECC_gf_SetClockSkin () {
    // Variable Declarations
    string lv_race;

    // Automatic Variable Declarations
    playergroup autoB1371643_g;
    int autoB1371643_var;
    string auto5CDE09CE_val;

    // Variable Initialization

    // Implementation
    autoB1371643_g = lib1B69CECC_gf_nonneutral_players();
    autoB1371643_var = -1;
    while (true) {
        autoB1371643_var = PlayerGroupNextPlayer(autoB1371643_g, autoB1371643_var);
        if (autoB1371643_var < 0) { break; }
        lv_race = PlayerRace(autoB1371643_var);
        auto5CDE09CE_val = lv_race;
        if (auto5CDE09CE_val == "Gen") {
            libNtve_gf_SetDialogItemImage(lib1B69CECC_gv_ui_clocklabel, "Assets\\Textures\\ui_console_timer_background_genetron.dds", PlayerGroupSingle(autoB1371643_var));
        }
        else if (auto5CDE09CE_val == "Xayi") {
            libNtve_gf_SetDialogItemImage(lib1B69CECC_gv_ui_clocklabel, "Assets\\Textures\\ui_console_timer_background_xayid.dds", PlayerGroupSingle(autoB1371643_var));
        }
        else if (auto5CDE09CE_val == "Keir") {
            libNtve_gf_SetDialogItemImage(lib1B69CECC_gv_ui_clocklabel, "Assets\\Textures\\ui_console_timer_background_keiron.dds", PlayerGroupSingle(autoB1371643_var));
        }
        else if (auto5CDE09CE_val == "Terr") {
            libNtve_gf_SetDialogItemImage(lib1B69CECC_gv_ui_clocklabel, "Assets\\Textures\\ui_console_timer_background_defaultterran.dds", PlayerGroupSingle(autoB1371643_var));
        }
        else if (auto5CDE09CE_val == "Zerg") {
            libNtve_gf_SetDialogItemImage(lib1B69CECC_gv_ui_clocklabel, "Assets\\Textures\\ui_console_timer_background_defaultzerg.dds", PlayerGroupSingle(autoB1371643_var));
        }
        else if (auto5CDE09CE_val == "Prot") {
            libNtve_gf_SetDialogItemImage(lib1B69CECC_gv_ui_clocklabel, "Assets\\Textures\\ui_console_timer_background_defaultprotoss.dds", PlayerGroupSingle(autoB1371643_var));
        }
        else {
            libNtve_gf_SetDialogItemImage(lib1B69CECC_gv_ui_clocklabel, "Assets\\Textures\\ui_console_timer_background_keiron.dds", PlayerGroupSingle(autoB1371643_var));
        }
    }
}

void lib1B69CECC_gf_ResetClockDisplay () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1B69CECC_gv_ui_clocklabel, StringExternal("Param/Value/lib_1B69CECC_7F3AAD05"), PlayerGroupAll());
}

void lib1B69CECC_gf_InitialiseClock () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    DialogCreate(115, 60, c_anchorBottomLeft, 290, 300, true);
    lib1B69CECC_gv_ui_clock = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 36), (DialogGetHeight(DialogLastCreated()) - 28), c_anchorCenter, 0, 0, StringExternal("Param/Value/lib_1B69CECC_F85BDA49"), "black_dots.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 90, 35);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "MultiplayerLoadingPanelFavored", PlayerGroupAll());
    lib1B69CECC_gv_ui_clocklabel = DialogControlLastCreated();
    DialogSetVisible(lib1B69CECC_gv_ui_clock, PlayerGroupAll(), true);
    DialogControlSetVisible(lib1B69CECC_gv_ui_clocklabel, PlayerGroupAll(), true);
    lib1B69CECC_gf_ResetClockDisplay();
    lib1B69CECC_gf_StopClock();
}

void lib1B69CECC_gf_DisplayVictoryMessage (playergroup lp_winners) {
    // Automatic Variable Declarations
    playergroup autoA551C0E6_g;
    int autoA551C0E6_var;

    // Implementation
    UIDisplayMessage(lib1B69CECC_gf_nonneutral_players(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1B69CECC_2F42B94E"));
    autoA551C0E6_g = lp_winners;
    autoA551C0E6_var = -1;
    while (true) {
        autoA551C0E6_var = PlayerGroupNextPlayer(autoA551C0E6_g, autoA551C0E6_var);
        if (autoA551C0E6_var < 0) { break; }
        UIDisplayMessage(lib1B69CECC_gf_nonneutral_players(), c_messageAreaSubtitle, PlayerName(autoA551C0E6_var));
    }
}

void lib1B69CECC_gf_EnableObserverUI (playergroup lp_observers, playergroup lp_players) {
    // Variable Declarations
    int lv_aObserver;
    int lv_aPlayer;

    // Automatic Variable Declarations
    playergroup auto1D4FE5A6_g;
    playergroup autoFF2D6FA4_g;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_menu, lp_observers, false);
    DialogControlSetVisible(lib1B69CECC_gv_ui_playpanel, lp_observers, false);
    auto1D4FE5A6_g = lp_observers;
    lv_aObserver = -1;
    while (true) {
        lv_aObserver = PlayerGroupNextPlayer(auto1D4FE5A6_g, lv_aObserver);
        if (lv_aObserver < 0) { break; }
        autoFF2D6FA4_g = lp_players;
        lv_aPlayer = -1;
        while (true) {
            lv_aPlayer = PlayerGroupNextPlayer(autoFF2D6FA4_g, lv_aPlayer);
            if (lv_aPlayer < 0) { break; }
            PlayerSetAlliance(lv_aPlayer, c_allianceIdVision, lv_aObserver, true);
        }
    }
    DialogControlSetVisible(lib1B69CECC_gv_playerOne.lv_ui_player_stats, lp_observers, true);
    DialogControlSetVisible(lib1B69CECC_gv_playerTwo.lv_ui_player_stats, lp_observers, true);
    TriggerExecute(lib1B69CECC_gt_UpdateResourceIconsTrigger, true, false);
    DialogControlSetVisible(lib1B69CECC_gv_ui_production_tab, lib1B69CECC_gv_oBSERVERS, true);
}

void lib1B69CECC_gf_EnablePlayerUI (playergroup lp_players) {
    // Variable Declarations
    int lv_aPlayer;

    // Automatic Variable Declarations
    playergroup autoE12E6E8E_g;
    int autoE12E6E8E_var;

    // Variable Initialization

    // Implementation
    UISetFrameVisible(lp_players, c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(lp_players, c_syncFrameTypeSupply, true);
    VisEnable(c_visTypeFog, true);
    DialogControlSetVisible(lib1B69CECC_gv_ui_menu, lp_players, false);
    DialogControlSetVisible(lib1B69CECC_gv_ui_playpanel, lp_players, false);
    DialogControlSetVisible(lib1B69CECC_gv_playerOne.lv_ui_player_stats, lp_players, false);
    DialogControlSetVisible(lib1B69CECC_gv_playerTwo.lv_ui_player_stats, lp_players, false);
    DialogControlSetVisible(lib1B69CECC_gv_ui_production_tab, lib1B69CECC_gv_pLAYERS, false);
    autoE12E6E8E_g = lp_players;
    autoE12E6E8E_var = -1;
    while (true) {
        autoE12E6E8E_var = PlayerGroupNextPlayer(autoE12E6E8E_g, autoE12E6E8E_var);
        if (autoE12E6E8E_var < 0) { break; }
        lib1B69CECC_gf_DisplayGenetronEnergy(autoE12E6E8E_var);
    }
}

void lib1B69CECC_gf_HideRevealDialog (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_reveal, PlayerGroupSingle(lp_player), false);
}

void lib1B69CECC_gf_ShowRevealCountdown (int lp_player, int lp_time_remaining) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1B69CECC_gv_ui_reveal_label, (StringExternal("Param/Value/lib_1B69CECC_550F33D7") + IntToText(lp_time_remaining)), PlayerGroupSingle(lp_player));
    DialogControlSetVisible(lib1B69CECC_gv_ui_reveal, PlayerGroupSingle(lp_player), true);
}

void lib1B69CECC_gf_ShowRevealMessage (int lp_player) {
    // Variable Declarations
    const string lv_rEVEAL_MESSAGE = "You are being revealed";

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(lib1B69CECC_gv_ui_reveal_label, StringToText(lv_rEVEAL_MESSAGE), PlayerGroupSingle(lp_player));
    DialogControlSetVisible(lib1B69CECC_gv_ui_reveal, PlayerGroupSingle(lp_player), true);
}

void lib1B69CECC_gf_InitialiseRevealDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/RevealMessageDialog");
    lib1B69CECC_gv_ui_reveal = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/RevealMessageDialog/Message");
    lib1B69CECC_gv_ui_reveal_label = DialogControlLastCreated();
    DialogControlSetVisible(lib1B69CECC_gv_ui_reveal, PlayerGroupAll(), false);
}

void lib1B69CECC_gf_HideGGMenu () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_gg_menu, PlayerGroupAll(), false);
}

void lib1B69CECC_gf_InitialiseGGMenu () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ContainerFrame");
    lib1B69CECC_gv_ui_gg_menu = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/ChooseYes");
    lib1B69CECC_gv_ui_gg_menuyes = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/ChooseNo");
    lib1B69CECC_gv_ui_gg_menuno = DialogControlLastCreated();
    lib1B69CECC_gf_HideGGMenu();
}

void lib1B69CECC_gf_InitialiseMenu () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/PeepMenuPanel/Help");
    lib1B69CECC_gv_ui_help = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/PeepMenuPanel/Chat");
    lib1B69CECC_gv_ui_chat = DialogControlLastCreated();
}

void lib1B69CECC_gf_InitialisePlayDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/PeepPlayPanel");
    lib1B69CECC_gv_ui_playpanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/PeepMenuPanel");
    lib1B69CECC_gv_ui_menu = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/PeepMenuPanel/Play");
    lib1B69CECC_gv_ui_play = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePulldown, "UIContainer/FullscreenUpperContainer/PeepPlayPanel/Race");
    lib1B69CECC_gv_ui_play_race = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePulldown, "UIContainer/FullscreenUpperContainer/PeepPlayPanel/League");
    lib1B69CECC_gv_ui_play_league = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/PeepPlayPanel/Confirm");
    lib1B69CECC_gv_ui_play_confirm = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/PeepPlayPanel/Cancel");
    lib1B69CECC_gv_ui_play_cancel = DialogControlLastCreated();
    DialogControlAddItem(lib1B69CECC_gv_ui_play_race, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_5DE344B1"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_race, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_E5DCA431"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_race, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_F2C43C1F"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_race, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_47AED35E"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_race, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_C874B829"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_race, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_5F50D4B5"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_race, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_3578C5FD"));
    DialogControlSelectItem(lib1B69CECC_gv_ui_play_race, PlayerGroupAll(), 1);
    DialogControlAddItem(lib1B69CECC_gv_ui_play_league, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_299A8AD4"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_league, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_DD98C82C"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_league, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_6DF26637"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_league, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_1E84688D"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_league, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_A7679ABE"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_league, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_0BF87976"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_league, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_AC5D4CE7"));
    DialogControlAddItem(lib1B69CECC_gv_ui_play_league, PlayerGroupAll(), StringExternal("Param/Value/lib_1B69CECC_8C125C91"));
    DialogControlSelectItem(lib1B69CECC_gv_ui_play_league, PlayerGroupAll(), 1);
}

void lib1B69CECC_gf_InitialiseLobbyTimer () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/PeepModLobbyMessageDialog");
    lib1B69CECC_gv_ui_lobby_timer_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/PeepModLobbyMessageDialog/LobbyMessage");
    lib1B69CECC_gv_ui_lobby_timer_message = DialogControlLastCreated();
    DialogControlSetVisible(lib1B69CECC_gv_ui_lobby_timer_dialog, PlayerGroupAll(), false);
}

void lib1B69CECC_gf_HideLobbyTimerMessage () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_lobby_timer_dialog, PlayerGroupAll(), false);
}

void lib1B69CECC_gf_ShowLobbyTimerMessage (int lp_count) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_lobby_timer_dialog, lib1B69CECC_gf_nonneutral_players(), true);
    libNtve_gf_SetDialogItemText(lib1B69CECC_gv_ui_lobby_timer_message, (StringExternal("Param/Value/lib_1B69CECC_6098EF3B") + FixedToText(lp_count, 0)), lib1B69CECC_gf_nonneutral_players());
}

void lib1B69CECC_gf_InitialiseTheLobby () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/PeepModLobby");
    lib1B69CECC_gv_ui_lobby_pane = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/PeepModLobby/LobbyList");
    lib1B69CECC_gv_ui_lobby_list_frame = DialogControlLastCreated();
    DialogControlCreateInPanel(lib1B69CECC_gv_ui_lobby_list_frame, c_triggerControlTypeListBox);
    lib1B69CECC_gv_ui_lobby_list = DialogControlLastCreated();
    DialogControlSetFullDialog(lib1B69CECC_gv_ui_lobby_list, PlayerGroupAll(), true);
}

void lib1B69CECC_gf_EnableLobbyUI () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UISetFrameVisible(lib1B69CECC_gf_nonneutral_players(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lib1B69CECC_gf_nonneutral_players(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(lib1B69CECC_gf_nonneutral_players(), c_syncFrameTypeAllianceButton, false);
    DialogControlSetVisible(lib1B69CECC_gv_ui_menu, lib1B69CECC_gf_nonneutral_players(), true);
    DialogControlSetVisible(lib1B69CECC_gv_ui_playpanel, lib1B69CECC_gf_nonneutral_players(), true);
    DialogControlSetVisible(lib1B69CECC_gv_playerOne.lv_ui_player_stats, lib1B69CECC_gf_nonneutral_players(), false);
    DialogControlSetVisible(lib1B69CECC_gv_playerTwo.lv_ui_player_stats, lib1B69CECC_gf_nonneutral_players(), false);
    DialogControlSetVisible(lib1B69CECC_gv_ui_production_tab, PlayerGroupAll(), false);
}

void lib1B69CECC_gf_HideLobby () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_lobby_pane, PlayerGroupAll(), false);
}

void lib1B69CECC_gf_RefreshLobby (structref<lib1B69CECC_gs_Lobby> lp_lobbyModel) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto00114768_g;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(lib1B69CECC_gv_ui_lobby_list, PlayerGroupAll());
    auto00114768_g = lp_lobbyModel.lv_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto00114768_g, lv_player);
        if (lv_player < 0) { break; }
        DialogControlAddItem(lib1B69CECC_gv_ui_lobby_list, PlayerGroupAll(), lib1B69CECC_gf_format_player_name(lv_player));
    }
}

void lib1B69CECC_gf_ShowLobbyUI () {
    // Variable Declarations
    const int lv_sPACEMARGIN = 50;
    const int lv_lOBBY_WIDTH = 700;
    const int lv_lOBBY_HEIGHT = 800;
    const int lv_lOBBY_X = 600;
    const int lv_lOBBY_Y = 100;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetVisible(lib1B69CECC_gv_ui_lobby_pane, PlayerGroupAll(), true);
    lib1B69CECC_gf_RefreshLobby(lib1B69CECC_gv_theLobby);
}

void lib1B69CECC_gf_AddMapFeature (point lp_position, fixed lp_facing, string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    lib1B69CECC_gv_featureCount += 1;
    lib1B69CECC_gv_mapFeatures[lib1B69CECC_gv_featureCount].lv_unitType = lp_unitType;
    lib1B69CECC_gv_mapFeatures[lib1B69CECC_gv_featureCount].lv_position = lp_position;
    lib1B69CECC_gv_mapFeatures[lib1B69CECC_gv_featureCount].lv_facing = lp_facing;
}

void lib1B69CECC_gf_LeaveLobby (int lp_thePlayer, structref<lib1B69CECC_gs_Lobby> lp_thisLobby) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1B69CECC_gf_IsLobbyAvailable(lib1B69CECC_gv_lobbyTimer) == true)) {
        PlayerGroupRemove(lp_thisLobby.lv_players, lp_thePlayer);
    }

    if ((lib1B69CECC_gf_IsEnoughPlayersToStart() == true)) {
    }
    else {
        lib1B69CECC_gf_StopTimer();
    }
}

void lib1B69CECC_gf_ClearLobby () {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupClear(lib1B69CECC_gv_theLobby.lv_players);
}

void lib1B69CECC_gf_JoinLobby (int lp_thePlayer, structref<lib1B69CECC_gs_Lobby> lp_thisLobby) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1B69CECC_gf_IsLobbyAvailable(lib1B69CECC_gv_lobbyTimer) == true)) {
        PlayerGroupAdd(lp_thisLobby.lv_players, lp_thePlayer);
        if ((lib1B69CECC_gf_IsEnoughPlayersToStart() == true)) {
            lib1B69CECC_gf_StartTimer();
        }

    }

}

void lib1B69CECC_gf_DependencyMessage () {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lib1B69CECC_gf_nonneutral_players(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1B69CECC_96486FC5"));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade is researched
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_Upgradeisresearched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1B69CECC_gv_upgradesArray[lib1B69CECC_gv_upgradesCounter] = libNtve_gf_TriggeringProgressUpgrade();
    lib1B69CECC_gv_upgradesCounter += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_Upgradeisresearched_Init () {
    lib1B69CECC_gt_Upgradeisresearched = TriggerCreate("lib1B69CECC_gt_Upgradeisresearched_Func");
    TriggerAddEventUnitResearchProgress(lib1B69CECC_gt_Upgradeisresearched, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Genetron Energy Display Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_UpdateGenetronEnergyDisplayTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_dETA_T = 0.0625;

    // Automatic Variable Declarations
    playergroup autoB6265D41_g;
    int autoB6265D41_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lib1B69CECC_gv_DETECT_VICTORY == true)) {
        Wait(lv_dETA_T, c_timeGame);
        autoB6265D41_g = lib1B69CECC_gv_pLAYERS;
        autoB6265D41_var = -1;
        while (true) {
            autoB6265D41_var = PlayerGroupNextPlayer(autoB6265D41_g, autoB6265D41_var);
            if (autoB6265D41_var < 0) { break; }
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_ui_genetron_energy_current, lib1B69CECC_gf_ComputeGenetronEnergyCurrent(autoB6265D41_var), PlayerGroupSingle(autoB6265D41_var));
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_ui_genetron_energy_max, lib1B69CECC_gf_ComputeGenetronEnergyMax(autoB6265D41_var), PlayerGroupSingle(autoB6265D41_var));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_UpdateGenetronEnergyDisplayTrigger_Init () {
    lib1B69CECC_gt_UpdateGenetronEnergyDisplayTrigger = TriggerCreate("lib1B69CECC_gt_UpdateGenetronEnergyDisplayTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Structure Destroyed Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_EnemyStructureDestroyedTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != libNtve_gf_KillingPlayer()))) {
            return false;
        }

        if (!((UnitGroupHasUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0), EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumorBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumorQueen"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Emanator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(lib1B69CECC_gv_eNEMY_STRUCTURE_DESTROYED);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_EnemyStructureDestroyedTrigger_Init () {
    lib1B69CECC_gt_EnemyStructureDestroyedTrigger = TriggerCreate("lib1B69CECC_gt_EnemyStructureDestroyedTrigger_Func");
    TriggerAddEventUnitDied(lib1B69CECC_gt_EnemyStructureDestroyedTrigger, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Generate Income Trigger 
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_GenerateIncomeTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(lib1B69CECC_gv_gENERATE_INCOME);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_GenerateIncomeTrigger_Init () {
    lib1B69CECC_gt_GenerateIncomeTrigger = TriggerCreate("lib1B69CECC_gt_GenerateIncomeTrigger_Func");
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 1, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 1, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 2, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 2, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 3, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 3, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 4, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 4, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 5, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 5, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 6, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 6, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 7, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 7, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 8, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 8, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 9, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 9, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 10, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 10, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 11, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 11, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 12, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 12, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 13, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 13, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 14, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 14, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 15, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(lib1B69CECC_gt_GenerateIncomeTrigger, 15, c_playerPropVespeneCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Upgrade Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ResearchUpgradeTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(lib1B69CECC_gv_rESEARCH_UPGRADE);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ResearchUpgradeTrigger_Init () {
    lib1B69CECC_gt_ResearchUpgradeTrigger = TriggerCreate("lib1B69CECC_gt_ResearchUpgradeTrigger_Func");
    TriggerAddEventUnitAbility(lib1B69CECC_gt_ResearchUpgradeTrigger, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1B69CECC_gt_ResearchUpgradeTrigger, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1B69CECC_gt_ResearchUpgradeTrigger, null, AbilityCommand("UpgradeToLair", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1B69CECC_gt_ResearchUpgradeTrigger, null, AbilityCommand("UpgradeToHive", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1B69CECC_gt_ResearchUpgradeTrigger, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1B69CECC_gt_ResearchUpgradeTrigger, null, AbilityCommand("MorphZerglingToBaneling", 255), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1B69CECC_gt_ResearchUpgradeTrigger, null, AbilityCommand("MorphToLurker", 255), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1B69CECC_gt_ResearchUpgradeTrigger, null, AbilityCommand("MorphToOverseer", 255), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1B69CECC_gt_ResearchUpgradeTrigger, null, AbilityCommand("MorphToBroodLord", 255), c_unitAbilStageComplete, false);
    TriggerAddEventUnitResearchProgress(lib1B69CECC_gt_ResearchUpgradeTrigger, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce a Unit Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ProduceaUnitTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), EventUnitProgressUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CreepTumor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CreepTumorBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CreepTumorQueen"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Larva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "MULE"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "BroodlingEscort"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Broodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "LocustMP"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "LocustMPFlying"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Emanator"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "AcidNest"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "AcidNestBuild"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CloakCharge"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "ShockCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(lib1B69CECC_gv_uNIT_PRODUCED);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ProduceaUnitTrigger_Init () {
    lib1B69CECC_gt_ProduceaUnitTrigger = TriggerCreate("lib1B69CECC_gt_ProduceaUnitTrigger_Func");
    TriggerAddEventUnitTrainProgress(lib1B69CECC_gt_ProduceaUnitTrigger, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Construct a Building Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ConstructaBuildingTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), EventUnitProgressUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "AutoTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CreepTumor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CreepTumorBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "CreepTumorQueen"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "OracleStasisTrap"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "Emanator"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "VolatileDischarge"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) != "SacrificialMutation"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(lib1B69CECC_gv_sTRUCTURE_COMPLETED);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ConstructaBuildingTrigger_Init () {
    lib1B69CECC_gt_ConstructaBuildingTrigger = TriggerCreate("lib1B69CECC_gt_ConstructaBuildingTrigger_Func");
    TriggerAddEventUnitConstructProgress(lib1B69CECC_gt_ConstructaBuildingTrigger, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalemate Message Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_StalemateMessageTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1B69CECC_gf_DisplayStalemateWarning();
    libNtve_gf_StopTimer(lib1B69CECC_gv_tmr_stalemate_message);
    TimerStart(lib1B69CECC_gv_tmr_stalemate, lib1B69CECC_gv_sTALEMATE_DELTA_TIME, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_StalemateMessageTrigger_Init () {
    lib1B69CECC_gt_StalemateMessageTrigger = TriggerCreate("lib1B69CECC_gt_StalemateMessageTrigger_Func");
    TriggerAddEventTimer(lib1B69CECC_gt_StalemateMessageTrigger, lib1B69CECC_gv_tmr_stalemate_message);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalemate Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_StalemateTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopTimer(lib1B69CECC_gv_tmr_stalemate);
    libNtve_gf_StopTimer(lib1B69CECC_gv_tmr_stalemate_message);
    lib1B69CECC_gf_HideStalemateWarning();
    lib1B69CECC_gf_EndMatchInStalemate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_StalemateTrigger_Init () {
    lib1B69CECC_gt_StalemateTrigger = TriggerCreate("lib1B69CECC_gt_StalemateTrigger_Func");
    TriggerAddEventTimer(lib1B69CECC_gt_StalemateTrigger, lib1B69CECC_gv_tmr_stalemate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Stalemate Detection Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ResetStalemateDetectionTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1B69CECC_gv_DETECT_VICTORY == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lib1B69CECC_gv_tmr_stalemate_message, lib1B69CECC_gv_sTALEMATE_DELTA_TIME, false, c_timeGame);
    libNtve_gf_StopTimer(lib1B69CECC_gv_tmr_stalemate);
    lib1B69CECC_gf_HideStalemateWarning();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ResetStalemateDetectionTrigger_Init () {
    lib1B69CECC_gt_ResetStalemateDetectionTrigger = TriggerCreate("lib1B69CECC_gt_ResetStalemateDetectionTrigger_Func");
    TriggerAddEventGeneric(lib1B69CECC_gt_ResetStalemateDetectionTrigger, lib1B69CECC_gv_gENERATE_INCOME);
    TriggerAddEventGeneric(lib1B69CECC_gt_ResetStalemateDetectionTrigger, lib1B69CECC_gv_uNIT_PRODUCED);
    TriggerAddEventGeneric(lib1B69CECC_gt_ResetStalemateDetectionTrigger, lib1B69CECC_gv_sTRUCTURE_COMPLETED);
    TriggerAddEventGeneric(lib1B69CECC_gt_ResetStalemateDetectionTrigger, lib1B69CECC_gv_rESEARCH_UPGRADE);
    TriggerAddEventGeneric(lib1B69CECC_gt_ResetStalemateDetectionTrigger, lib1B69CECC_gv_eNEMY_STRUCTURE_DESTROYED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Resource Icons Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_UpdateResourceIconsTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_dETA_T = 0.0625;
    playergroup lv_player_one;
    playergroup lv_player_two;
    string lv_theRace;
    string lv_race_text;

    // Automatic Variable Declarations
    playergroup auto98BCC76D_g;
    int auto98BCC76D_var;
    playergroup auto6367159E_g;
    int auto6367159E_var;
    playergroup autoB69F3BB4_g;
    int autoB69F3BB4_var;
    playergroup auto620D320A_g;
    int auto620D320A_var;

    // Variable Initialization
    lv_player_one = PlayerGroupEmpty();
    lv_player_two = PlayerGroupEmpty();
    lv_race_text = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player_one = lib1B69CECC_gf_choose_a_player(lib1B69CECC_gv_pLAYERS);
    lv_player_two = PlayerGroupCopy(lib1B69CECC_gv_pLAYERS);
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_player_one, lv_player_two);
    lv_player_two = lib1B69CECC_gf_choose_a_player(lv_player_two);
    auto98BCC76D_g = lv_player_one;
    auto98BCC76D_var = -1;
    while (true) {
        auto98BCC76D_var = PlayerGroupNextPlayer(auto98BCC76D_g, auto98BCC76D_var);
        if (auto98BCC76D_var < 0) { break; }
        libNtve_gf_SetDialogItemText(lib1B69CECC_gv_playerOne.lv_ui_player_name, PlayerName(auto98BCC76D_var), PlayerGroupAll());
    }
    auto6367159E_g = lv_player_two;
    auto6367159E_var = -1;
    while (true) {
        auto6367159E_var = PlayerGroupNextPlayer(auto6367159E_g, auto6367159E_var);
        if (auto6367159E_var < 0) { break; }
        libNtve_gf_SetDialogItemText(lib1B69CECC_gv_playerTwo.lv_ui_player_name, PlayerName(auto6367159E_var), PlayerGroupAll());
    }
    while ((lib1B69CECC_gv_DETECT_VICTORY == true)) {
        Wait(lv_dETA_T, c_timeGame);
        autoB69F3BB4_g = lv_player_one;
        autoB69F3BB4_var = -1;
        while (true) {
            autoB69F3BB4_var = PlayerGroupNextPlayer(autoB69F3BB4_g, autoB69F3BB4_var);
            if (autoB69F3BB4_var < 0) { break; }
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerOne.lv_ui_minerals_label, PlayerScoreValueGetAsInt(autoB69F3BB4_var, "MineralsCurrent"), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerOne.lv_ui_gas_label, PlayerScoreValueGetAsInt(autoB69F3BB4_var, "VespeneCurrent"), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerOne.lv_ui_supplycurrent_label, PlayerScoreValueGetAsInt(autoB69F3BB4_var, "FoodUsed"), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerOne.lv_ui_supplymax_label, MinI(PlayerScoreValueGetAsInt(autoB69F3BB4_var, "FoodMade"), 200), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerOne.lv_ui_energycurrent_label, lib1B69CECC_gf_ComputeGenetronEnergyCurrent(autoB69F3BB4_var), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerOne.lv_ui_energymax_label, lib1B69CECC_gf_ComputeGenetronEnergyMax(autoB69F3BB4_var), PlayerGroupAll());
            lib1B69CECC_gf_DisplayRaceIcon(autoB69F3BB4_var, lib1B69CECC_gv_playerOne);
        }
        auto620D320A_g = lv_player_two;
        auto620D320A_var = -1;
        while (true) {
            auto620D320A_var = PlayerGroupNextPlayer(auto620D320A_g, auto620D320A_var);
            if (auto620D320A_var < 0) { break; }
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerTwo.lv_ui_minerals_label, PlayerScoreValueGetAsInt(auto620D320A_var, "MineralsCurrent"), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerTwo.lv_ui_gas_label, PlayerScoreValueGetAsInt(auto620D320A_var, "VespeneCurrent"), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerTwo.lv_ui_supplycurrent_label, PlayerScoreValueGetAsInt(auto620D320A_var, "FoodUsed"), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerTwo.lv_ui_supplymax_label, MinI(PlayerScoreValueGetAsInt(auto620D320A_var, "FoodMade"), 200), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerTwo.lv_ui_energycurrent_label, lib1B69CECC_gf_ComputeGenetronEnergyCurrent(auto620D320A_var), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lib1B69CECC_gv_playerTwo.lv_ui_energymax_label, lib1B69CECC_gf_ComputeGenetronEnergyMax(auto620D320A_var), PlayerGroupAll());
            lib1B69CECC_gf_DisplayRaceIcon(auto620D320A_var, lib1B69CECC_gv_playerTwo);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_UpdateResourceIconsTrigger_Init () {
    lib1B69CECC_gt_UpdateResourceIconsTrigger = TriggerCreate("lib1B69CECC_gt_UpdateResourceIconsTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Time Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_SetTimeTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colour;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_colour = Color(28*100/255,167*100/255,234*100/255);

    // Conditions
    if (testConds) {
        if (!((lib1B69CECC_gv_game_started == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1B69CECC_gv_time_diff += 1;
    libNtve_gf_SetDialogItemText(lib1B69CECC_gv_ui_clocklabel, TextWithColor(lib1B69CECC_gf_convertSecondsToTime(lib1B69CECC_gv_time_diff), lv_colour), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_SetTimeTrigger_Init () {
    lib1B69CECC_gt_SetTimeTrigger = TriggerCreate("lib1B69CECC_gt_SetTimeTrigger_Func");
    TriggerAddEventTimePeriodic(lib1B69CECC_gt_SetTimeTrigger, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Countdown Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_RevealCountdownTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    playergroup autoCD416776_g;
    int autoCD416776_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lib1B69CECC_gv_rEVEALED_PLAYERS) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCD416776_g = lib1B69CECC_gv_rEVEALED_PLAYERS;
    autoCD416776_var = -1;
    while (true) {
        autoCD416776_var = PlayerGroupNextPlayer(autoCD416776_g, autoCD416776_var);
        if (autoCD416776_var < 0) { break; }
        if ((lib1B69CECC_gf_IsPlayeralreadyinrecord(autoCD416776_var) == true)) {
            if ((lib1B69CECC_gf_IsPlayeralreadyinrecord(autoCD416776_var) == true)) {
                lv_index = lib1B69CECC_gf_find_index_of_player(autoCD416776_var);
                lib1B69CECC_gv_reveal_timer_record[lv_index].lv_time_left = MaxI((lib1B69CECC_gv_reveal_timer_record[lv_index].lv_time_left - 1), 0);
                if ((lib1B69CECC_gv_reveal_timer_record[lv_index].lv_time_left == 0)) {
                    lib1B69CECC_gf_ShowRevealMessage(autoCD416776_var);
                    lib1B69CECC_gf_reveal_player(autoCD416776_var);
                }
                else {
                    lib1B69CECC_gf_ShowRevealCountdown(autoCD416776_var, lib1B69CECC_gv_reveal_timer_record[lv_index].lv_time_left);
                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_RevealCountdownTrigger_Init () {
    lib1B69CECC_gt_RevealCountdownTrigger = TriggerCreate("lib1B69CECC_gt_RevealCountdownTrigger_Func");
    TriggerAddEventTimePeriodic(lib1B69CECC_gt_RevealCountdownTrigger, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Detect Reveal Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_DetectRevealTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_rEVEAL_TIMEOUT = 30;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1B69CECC_gf_is_town_centre(EventUnit()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(lib1B69CECC_gv_pLAYERS, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1B69CECC_gf_ShouldPlayerBeRevealed(EventPlayer()) == true)) {
        if ((PlayerGroupHasPlayer(lib1B69CECC_gv_rEVEALED_PLAYERS, EventPlayer()) == false)) {
            PlayerGroupAdd(lib1B69CECC_gv_rEVEALED_PLAYERS, EventPlayer());
            lib1B69CECC_gf_StartRevealTimer(EventPlayer());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_DetectRevealTrigger_Init () {
    lib1B69CECC_gt_DetectRevealTrigger = TriggerCreate("lib1B69CECC_gt_DetectRevealTrigger_Func");
    TriggerAddEventUnitDied(lib1B69CECC_gt_DetectRevealTrigger, null);
    TriggerAddEventUnitConstructProgress(lib1B69CECC_gt_DetectRevealTrigger, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Detect Unreveal Trigger
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_DetectUnrevealTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1B69CECC_gf_is_town_centre(EventUnitProgressUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(lib1B69CECC_gv_rEVEALED_PLAYERS, EventPlayer());
    lib1B69CECC_gf_HideRevealDialog(EventPlayer());
    lib1B69CECC_gf_unreveal_player(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_DetectUnrevealTrigger_Init () {
    lib1B69CECC_gt_DetectUnrevealTrigger = TriggerCreate("lib1B69CECC_gt_DetectUnrevealTrigger_Func");
    TriggerAddEventUnitConstructProgress(lib1B69CECC_gt_DetectUnrevealTrigger, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Detect GG
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_DetectGG_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib1B69CECC_gv_pLAYERS, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(lib1B69CECC_gv_ui_gg_menu, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_DetectGG_Init () {
    lib1B69CECC_gt_DetectGG = TriggerCreate("lib1B69CECC_gt_DetectGG_Func");
    TriggerAddEventChatMessage(lib1B69CECC_gt_DetectGG, c_playerAny, "gg", true);
    TriggerAddEventChatMessage(lib1B69CECC_gt_DetectGG, c_playerAny, "GG", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clean Up When Player Leaves
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_CleanUpWhenPlayerLeaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoBA2FA09C_g;
    int autoBA2FA09C_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoBA2FA09C_g = UnitGroupFilterPlayer(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32))), 0), EventPlayer(), 0);
    autoBA2FA09C_u = UnitGroupCount(autoBA2FA09C_g, c_unitCountAll);
    for (;; autoBA2FA09C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBA2FA09C_g, autoBA2FA09C_u);
        if (lv_unit == null) { break; }
        UnitKill(lv_unit);
    }
    lib1B69CECC_gf_LeaveLobby(EventPlayer(), lib1B69CECC_gv_theLobby);
    lib1B69CECC_gf_RefreshLobby(lib1B69CECC_gv_theLobby);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_CleanUpWhenPlayerLeaves_Init () {
    lib1B69CECC_gt_CleanUpWhenPlayerLeaves = TriggerCreate("lib1B69CECC_gt_CleanUpWhenPlayerLeaves_Func");
    TriggerAddEventPlayerLeft(lib1B69CECC_gt_CleanUpWhenPlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Detect Victory
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_DetectVictory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_losers;
    bool lv_restartLobby;
    unit lv_aUnit;
    int lv_aPlayer;

    // Automatic Variable Declarations
    playergroup autoA6D6F3A3_g;

    // Variable Initialization
    lv_losers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib1B69CECC_gv_DETECT_VICTORY == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_restartLobby = false;
    autoA6D6F3A3_g = lib1B69CECC_gv_pLAYERS;
    lv_aPlayer = -1;
    while (true) {
        lv_aPlayer = PlayerGroupNextPlayer(autoA6D6F3A3_g, lv_aPlayer);
        if (lv_aPlayer < 0) { break; }
        if ((UnitGroupCount(UnitGroup(null, lv_aPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            lib1B69CECC_gf_StopVictoryDetection();
            lv_restartLobby = true;
            PlayerGroupAdd(lv_losers, lv_aPlayer);
        }

    }
    if ((lv_restartLobby == true)) {
        lib1B69CECC_gf_DisplayVictoryMessage(lib1B69CECC_gf_compute_winners(lib1B69CECC_gv_pLAYERS, lv_losers));
        lib1B69CECC_gf_ResetGame();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_DetectVictory_Init () {
    lib1B69CECC_gt_DetectVictory = TriggerCreate("lib1B69CECC_gt_DetectVictory_Func");
    TriggerAddEventUnitDied(lib1B69CECC_gt_DetectVictory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HandleTimeOut 
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_HandleTimeOut_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1B69CECC_gv_count -= 1;
    lib1B69CECC_gf_ShowLobbyTimerMessage(lib1B69CECC_gv_count);
    if ((lib1B69CECC_gv_count <= 3) && (lib1B69CECC_gf_IsEnoughPlayersToStart() == true)) {
        DialogControlSetVisible(lib1B69CECC_gv_ui_menu, lib1B69CECC_gf_nonneutral_players(), false);
        DialogControlSetVisible(lib1B69CECC_gv_ui_playpanel, lib1B69CECC_gf_nonneutral_players(), false);
    }

    if ((lib1B69CECC_gv_count <= 0)) {
        lib1B69CECC_gf_StopTimer();
        lib1B69CECC_gf_InitialiseGame(lib1B69CECC_gv_theLobby.lv_players);
        DialogControlSetVisible(lib1B69CECC_gv_ui_play_confirm, lib1B69CECC_gf_nonneutral_players(), true);
        DialogControlSetVisible(lib1B69CECC_gv_ui_play_cancel, lib1B69CECC_gf_nonneutral_players(), false);
        lib1B69CECC_gf_HideLobbyTimerMessage();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_HandleTimeOut_Init () {
    lib1B69CECC_gt_HandleTimeOut = TriggerCreate("lib1B69CECC_gt_HandleTimeOut_Func");
    TriggerAddEventTimer(lib1B69CECC_gt_HandleTimeOut, lib1B69CECC_gv_lobbyTimer.lv_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalemate UI Refresh
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_StalemateUIRefresh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(lib1B69CECC_gv_ui_reveal_label2, (StringExternal("Param/Value/lib_1B69CECC_CAD8258E") + FixedToText(TimerGetRemaining(lib1B69CECC_gv_tmr_stalemate), 0)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_StalemateUIRefresh_Init () {
    lib1B69CECC_gt_StalemateUIRefresh = TriggerCreate("lib1B69CECC_gt_StalemateUIRefresh_Func");
    TriggerAddEventTimer(lib1B69CECC_gt_StalemateUIRefresh, lib1B69CECC_gv_tmr_stalemate_message_refesh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click Yes
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ClickYes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1B69CECC_gv_ui_gg_menuyes))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1B69CECC_gf_StopVictoryDetection();
    lib1B69CECC_gf_HideGGMenu();
    lib1B69CECC_gf_DisplayVictoryMessage(lib1B69CECC_gf_compute_winners(lib1B69CECC_gv_pLAYERS, PlayerGroupSingle(EventPlayer())));
    lib1B69CECC_gf_ResetGame();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ClickYes_Init () {
    lib1B69CECC_gt_ClickYes = TriggerCreate("lib1B69CECC_gt_ClickYes_Func");
    TriggerAddEventDialogControl(lib1B69CECC_gt_ClickYes, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click No
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ClickNo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1B69CECC_gv_ui_gg_menuno))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(lib1B69CECC_gv_ui_gg_menu, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ClickNo_Init () {
    lib1B69CECC_gt_ClickNo = TriggerCreate("lib1B69CECC_gt_ClickNo_Func");
    TriggerAddEventDialogControl(lib1B69CECC_gt_ClickNo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click Help
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ClickHelp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_player_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player_group = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1B69CECC_gv_ui_help))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_player_group, EventPlayer());
    HelpPanelDisplayPage(lv_player_group, c_helpPanelPageTutorials);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ClickHelp_Init () {
    lib1B69CECC_gt_ClickHelp = TriggerCreate("lib1B69CECC_gt_ClickHelp_Func");
    TriggerAddEventDialogControl(lib1B69CECC_gt_ClickHelp, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click Chat
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ClickChat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_player_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player_group = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1B69CECC_gv_ui_chat))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_player_group, EventPlayer());
    UIMessageLogPanelSetVisible(lv_player_group, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ClickChat_Init () {
    lib1B69CECC_gt_ClickChat = TriggerCreate("lib1B69CECC_gt_ClickChat_Func");
    TriggerAddEventDialogControl(lib1B69CECC_gt_ClickChat, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click Cancel
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ClickCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1B69CECC_gv_ui_play_cancel))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1B69CECC_gf_LeaveLobby(EventPlayer(), lib1B69CECC_gv_theLobby);
    lib1B69CECC_gf_RefreshLobby(lib1B69CECC_gv_theLobby);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ClickCancel_Init () {
    lib1B69CECC_gt_ClickCancel = TriggerCreate("lib1B69CECC_gt_ClickCancel_Func");
    TriggerAddEventDialogControl(lib1B69CECC_gt_ClickCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click Confirm
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_ClickConfirm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1B69CECC_gv_ui_play_confirm))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1B69CECC_gf_JoinLobby(EventPlayer(), lib1B69CECC_gv_theLobby);
    lib1B69CECC_gf_RefreshLobby(lib1B69CECC_gv_theLobby);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_ClickConfirm_Init () {
    lib1B69CECC_gt_ClickConfirm = TriggerCreate("lib1B69CECC_gt_ClickConfirm_Func");
    TriggerAddEventDialogControl(lib1B69CECC_gt_ClickConfirm, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Selected
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_RaceSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_raceIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1B69CECC_gv_ui_play_race))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_raceIndex = DialogControlGetSelectedItem(lib1B69CECC_gv_ui_play_race, EventPlayer());
    DataTableSetInt(true, lib1B69CECC_gf_compute_player_race_key(EventPlayer()), lv_raceIndex);
    lib1B69CECC_gf_RefreshLobby(lib1B69CECC_gv_theLobby);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_RaceSelected_Init () {
    lib1B69CECC_gt_RaceSelected = TriggerCreate("lib1B69CECC_gt_RaceSelected_Func");
    TriggerAddEventDialogControl(lib1B69CECC_gt_RaceSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Melee Initialization
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_gt_MeleeInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedFaster);
    lib1B69CECC_gf_RecordUnitSpeeds();
    lib1B69CECC_gf_DisableResourceTrading();
    lib1B69CECC_gf_InitialiseRaceSelections();
    lib1B69CECC_gf_RecordStartingMapFeatures();
    lib1B69CECC_gf_InitialiseLobbyTimer();
    lib1B69CECC_gf_InitialiseTheLobby();
    lib1B69CECC_gf_InitialiseResourceIcons();
    lib1B69CECC_gf_InitialiseMenu();
    lib1B69CECC_gf_InitialisePlayDialog();
    lib1B69CECC_gf_InitialiseGGMenu();
    lib1B69CECC_gf_InitialiseRevealDialog();
    lib1B69CECC_gf_InitialiseStalemateDialog();
    lib1B69CECC_gf_InitialiseClock();
    lib1B69CECC_gf_InitialiseProductionTab();
    lib1B69CECC_gf_InitialiseEnergyDisplay();
    lib1B69CECC_gf_ResetLobbyUI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1B69CECC_gt_MeleeInitialization_Init () {
    lib1B69CECC_gt_MeleeInitialization = TriggerCreate("lib1B69CECC_gt_MeleeInitialization_Func");
    TriggerAddEventMapInit(lib1B69CECC_gt_MeleeInitialization);
}

void lib1B69CECC_InitTriggers () {
    lib1B69CECC_gt_Upgradeisresearched_Init();
    lib1B69CECC_gt_UpdateGenetronEnergyDisplayTrigger_Init();
    lib1B69CECC_gt_EnemyStructureDestroyedTrigger_Init();
    lib1B69CECC_gt_GenerateIncomeTrigger_Init();
    lib1B69CECC_gt_ResearchUpgradeTrigger_Init();
    lib1B69CECC_gt_ProduceaUnitTrigger_Init();
    lib1B69CECC_gt_ConstructaBuildingTrigger_Init();
    lib1B69CECC_gt_StalemateMessageTrigger_Init();
    lib1B69CECC_gt_StalemateTrigger_Init();
    lib1B69CECC_gt_ResetStalemateDetectionTrigger_Init();
    lib1B69CECC_gt_UpdateResourceIconsTrigger_Init();
    lib1B69CECC_gt_SetTimeTrigger_Init();
    lib1B69CECC_gt_RevealCountdownTrigger_Init();
    lib1B69CECC_gt_DetectRevealTrigger_Init();
    lib1B69CECC_gt_DetectUnrevealTrigger_Init();
    lib1B69CECC_gt_DetectGG_Init();
    lib1B69CECC_gt_CleanUpWhenPlayerLeaves_Init();
    lib1B69CECC_gt_DetectVictory_Init();
    lib1B69CECC_gt_HandleTimeOut_Init();
    lib1B69CECC_gt_StalemateUIRefresh_Init();
    lib1B69CECC_gt_ClickYes_Init();
    lib1B69CECC_gt_ClickNo_Init();
    lib1B69CECC_gt_ClickHelp_Init();
    lib1B69CECC_gt_ClickChat_Init();
    lib1B69CECC_gt_ClickCancel_Init();
    lib1B69CECC_gt_ClickConfirm_Init();
    lib1B69CECC_gt_RaceSelected_Init();
    lib1B69CECC_gt_MeleeInitialization_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1B69CECC_InitLib_completed = false;

void lib1B69CECC_InitLib () {
    if (lib1B69CECC_InitLib_completed) {
        return;
    }

    lib1B69CECC_InitLib_completed = true;

    lib1B69CECC_InitLibraries();
    lib1B69CECC_InitVariables();
    lib1B69CECC_InitTriggers();
}

